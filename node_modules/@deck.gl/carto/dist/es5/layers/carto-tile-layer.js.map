{"version":3,"sources":["../../../src/layers/carto-tile-layer.js"],"names":["parseJSON","arrayBuffer","JSON","parse","TextDecoder","decode","parsePbf","buffer","pbf","Protobuf","tile","Tile","read","unpackProperties","properties","length","map","item","currentRecord","data","forEach","key","value","parseCartoTile","options","formatTiles","cartoTile","TILE_FORMATS","GEOJSON","features","points","lines","polygons","defaultTileFormat","BINARY","CartoTileLoader","name","id","module","extensions","mimeTypes","category","worker","parseSync","defaultProps","MVTLayer","loaders","CartoTileLayer","url","state","Promise","reject","loadOptions","getLoadOptions","props","fetch","signal","mimeType","log","assert","Object","values","includes","propName","layer","autoHighlight","bbox","west","south","east","north","ClipExtension","clipBounds","subLayer","GeoJsonLayer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,SAAT,CAAmBC,WAAnB,EAAgC;AAC9B,SAAOC,IAAI,CAACC,KAAL,CAAW,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBJ,WAAzB,CAAX,CAAP;AACD;;AAED,SAASK,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,MAAMC,GAAG,GAAG,IAAIC,YAAJ,CAAaF,MAAb,CAAZ;;AACA,MAAMG,IAAI,GAAGC,gBAAKC,IAAL,CAAUJ,GAAV,CAAb;;AACA,SAAOE,IAAP;AACD;;AAED,SAASG,gBAAT,CAA0BC,UAA1B,EAAsC;AACpC,MAAI,CAACA,UAAD,IAAe,CAACA,UAAU,CAACC,MAA/B,EAAuC;AACrC,WAAO,EAAP;AACD;;AACD,SAAOD,UAAU,CAACE,GAAX,CAAe,UAAAC,IAAI,EAAI;AAC5B,QAAMC,aAAa,GAAG,EAAtB;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,gBAAkB;AAAA,UAAhBC,GAAgB,QAAhBA,GAAgB;AAAA,UAAXC,KAAW,QAAXA,KAAW;AAClCJ,MAAAA,aAAa,CAACG,GAAD,CAAb,GAAqBC,KAArB;AACD,KAFD;AAGA,WAAOJ,aAAP;AACD,GANM,CAAP;AAOD;;AAED,SAASK,cAAT,CAAwBtB,WAAxB,EAAqCuB,OAArC,EAA8C;AAC5C,MAAI,CAACvB,WAAL,EAAkB,OAAO,IAAP;AAClB,MAAMwB,WAAW,GAAGD,OAAO,IAAIA,OAAO,CAACE,SAAnB,IAAgCF,OAAO,CAACE,SAAR,CAAkBD,WAAtE;AACA,MAAIA,WAAW,KAAKE,4BAAaC,OAAjC,EAA0C,OAAO,0BAAgB5B,SAAS,CAACC,WAAD,CAAT,CAAuB4B,QAAvC,CAAP;AAE1C,MAAMnB,IAAI,GAAGJ,QAAQ,CAACL,WAAD,CAArB;AAEA,MAAO6B,MAAP,GAAkCpB,IAAlC,CAAOoB,MAAP;AAAA,MAAeC,KAAf,GAAkCrB,IAAlC,CAAeqB,KAAf;AAAA,MAAsBC,QAAtB,GAAkCtB,IAAlC,CAAsBsB,QAAtB;AACA,MAAMb,IAAI,GAAG;AACXW,IAAAA,MAAM,kCAAMA,MAAN;AAAchB,MAAAA,UAAU,EAAED,gBAAgB,CAACiB,MAAM,CAAChB,UAAR;AAA1C,MADK;AAEXiB,IAAAA,KAAK,kCAAMA,KAAN;AAAajB,MAAAA,UAAU,EAAED,gBAAgB,CAACkB,KAAK,CAACjB,UAAP;AAAzC,MAFM;AAGXkB,IAAAA,QAAQ,kCAAMA,QAAN;AAAgBlB,MAAAA,UAAU,EAAED,gBAAgB,CAACmB,QAAQ,CAAClB,UAAV;AAA5C;AAHG,GAAb;AAMA,SAAOK,IAAP;AACD;;AAED,IAAMc,iBAAiB,GAAGN,4BAAaO,MAAvC;AAEA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,YADgB;AAEtBC,EAAAA,EAAE,EAAE,WAFkB;AAGtBC,EAAAA,MAAM,EAAE,OAHc;AAItBC,EAAAA,UAAU,EAAE,CAAC,KAAD,CAJU;AAKtBC,EAAAA,SAAS,EAAE,CAAC,wBAAD,CALW;AAMtBC,EAAAA,QAAQ,EAAE,UANY;AAOtBC,EAAAA,MAAM,EAAE,KAPc;AAQtBvC,EAAAA,KAAK;AAAA,2EAAE,iBAAOF,WAAP,EAAoBuB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAgCD,cAAc,CAACtB,WAAD,EAAcuB,OAAd,CAA9C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KARiB;AAStBmB,EAAAA,SAAS,EAAEpB,cATW;AAUtBC,EAAAA,OAAO,EAAE;AACPE,IAAAA,SAAS,EAAE;AACTD,MAAAA,WAAW,EAAEQ;AADJ;AADJ;AAVa,CAAxB;;AAiBA,IAAMW,YAAY,mCACbC,oBAASD,YADI;AAEhBnB,EAAAA,WAAW,EAAEQ,iBAFG;AAGhBa,EAAAA,OAAO,EAAE,CAACX,eAAD;AAHO,EAAlB;;IAMqBY,c;;;;;;;;;;;;WACnB,qBAAYrC,IAAZ,EAAkB;AAChB,UAAMsC,GAAG,GAAG,oCAAoB,KAAKC,KAAL,CAAW9B,IAA/B,EAAqCT,IAArC,CAAZ;;AACA,UAAI,CAACsC,GAAL,EAAU;AACR,eAAOE,OAAO,CAACC,MAAR,CAAe,aAAf,CAAP;AACD;;AAED,UAAIC,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACA,wBAA6B,KAAKC,KAAlC;AAAA,UAAOC,KAAP,eAAOA,KAAP;AAAA,UAAc9B,WAAd,eAAcA,WAAd;AACA,UAAO+B,MAAP,GAAiB9C,IAAjB,CAAO8C,MAAP;AAEAJ,MAAAA,WAAW,mCACNA,WADM;AAETK,QAAAA,QAAQ,EAAE;AAFD,QAAX;;AAKA,UAAIhC,WAAJ,EAAiB;AACfiC,kBAAIC,MAAJ,CACEC,MAAM,CAACC,MAAP,CAAclC,2BAAd,EAA4BmC,QAA5B,CAAqCrC,WAArC,CADF,2CAEoCA,WAFpC;;AAIA2B,QAAAA,WAAW,CAAC1B,SAAZ,GAAwB;AAACD,UAAAA,WAAW,EAAXA;AAAD,SAAxB;AACD;;AAED,aAAO8B,KAAK,CAACP,GAAD,EAAM;AAACe,QAAAA,QAAQ,EAAE,MAAX;AAAmBC,QAAAA,KAAK,EAAE,IAA1B;AAAgCZ,QAAAA,WAAW,EAAXA,WAAhC;AAA6CI,QAAAA,MAAM,EAANA;AAA7C,OAAN,CAAZ;AACD;;;WAED,yBAAgBF,KAAhB,EAAuB;AACrB,UAAIA,KAAK,CAACnC,IAAN,KAAe,IAAnB,EAAyB;AACvB,eAAO,IAAP;AACD;;AAEDmC,MAAAA,KAAK,CAACW,aAAN,GAAsB,KAAtB;AAEA,6BAEIX,KAAK,CAAC5C,IAFV,CACEwD,IADF;AAAA,UACSC,IADT,oBACSA,IADT;AAAA,UACeC,KADf,oBACeA,KADf;AAAA,UACsBC,IADtB,oBACsBA,IADtB;AAAA,UAC4BC,KAD5B,oBAC4BA,KAD5B;AAGAhB,MAAAA,KAAK,CAACf,UAAN,IAAoB,IAAIgC,yBAAJ,EAApB,0CAA6CjB,KAAK,CAACf,UAAN,IAAoB,EAAjE;AACAe,MAAAA,KAAK,CAACkB,UAAN,GAAmB,CAACL,IAAD,EAAOC,KAAP,EAAcC,IAAd,EAAoBC,KAApB,CAAnB;AAEA,UAAMG,QAAQ,GAAG,IAAIC,oBAAJ,mBACZpB,KADY,EAAjB;AAGA,aAAOmB,QAAP;AACD;;;EA5CyC5B,mB;;;AA+C5CE,cAAc,CAAC4B,SAAf,GAA2B,gBAA3B;AACA5B,cAAc,CAACH,YAAf,GAA8BA,YAA9B","sourcesContent":["/* global TextDecoder */\nimport Protobuf from 'pbf';\nimport {log} from '@deck.gl/core';\nimport {ClipExtension} from '@deck.gl/extensions';\nimport {MVTLayer, _getURLFromTemplate} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {geojsonToBinary} from '@loaders.gl/gis';\nimport {Tile} from './schema/carto-tile';\nimport {TILE_FORMATS} from '../api/maps-api-common';\n\nfunction parseJSON(arrayBuffer) {\n  return JSON.parse(new TextDecoder().decode(arrayBuffer));\n}\n\nfunction parsePbf(buffer) {\n  const pbf = new Protobuf(buffer);\n  const tile = Tile.read(pbf);\n  return tile;\n}\n\nfunction unpackProperties(properties) {\n  if (!properties || !properties.length) {\n    return [];\n  }\n  return properties.map(item => {\n    const currentRecord = {};\n    item.data.forEach(({key, value}) => {\n      currentRecord[key] = value;\n    });\n    return currentRecord;\n  });\n}\n\nfunction parseCartoTile(arrayBuffer, options) {\n  if (!arrayBuffer) return null;\n  const formatTiles = options && options.cartoTile && options.cartoTile.formatTiles;\n  if (formatTiles === TILE_FORMATS.GEOJSON) return geojsonToBinary(parseJSON(arrayBuffer).features);\n\n  const tile = parsePbf(arrayBuffer);\n\n  const {points, lines, polygons} = tile;\n  const data = {\n    points: {...points, properties: unpackProperties(points.properties)},\n    lines: {...lines, properties: unpackProperties(lines.properties)},\n    polygons: {...polygons, properties: unpackProperties(polygons.properties)}\n  };\n\n  return data;\n}\n\nconst defaultTileFormat = TILE_FORMATS.BINARY;\n\nconst CartoTileLoader = {\n  name: 'CARTO Tile',\n  id: 'cartoTile',\n  module: 'carto',\n  extensions: ['pbf'],\n  mimeTypes: ['application/x-protobuf'],\n  category: 'geometry',\n  worker: false,\n  parse: async (arrayBuffer, options) => parseCartoTile(arrayBuffer, options),\n  parseSync: parseCartoTile,\n  options: {\n    cartoTile: {\n      formatTiles: defaultTileFormat\n    }\n  }\n};\n\nconst defaultProps = {\n  ...MVTLayer.defaultProps,\n  formatTiles: defaultTileFormat,\n  loaders: [CartoTileLoader]\n};\n\nexport default class CartoTileLayer extends MVTLayer {\n  getTileData(tile) {\n    const url = _getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n\n    let loadOptions = this.getLoadOptions();\n    const {fetch, formatTiles} = this.props;\n    const {signal} = tile;\n\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf'\n    };\n\n    if (formatTiles) {\n      log.assert(\n        Object.values(TILE_FORMATS).includes(formatTiles),\n        `Invalid value for formatTiles: ${formatTiles}. Use value from TILE_FORMATS`\n      );\n      loadOptions.cartoTile = {formatTiles};\n    }\n\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(props) {\n    if (props.data === null) {\n      return null;\n    }\n\n    props.autoHighlight = false;\n\n    const {\n      bbox: {west, south, east, north}\n    } = props.tile;\n    props.extensions = [new ClipExtension(), ...(props.extensions || [])];\n    props.clipBounds = [west, south, east, north];\n\n    const subLayer = new GeoJsonLayer({\n      ...props\n    });\n    return subLayer;\n  }\n}\n\nCartoTileLayer.layerName = 'CartoTileLayer';\nCartoTileLayer.defaultProps = defaultProps;\n"],"file":"carto-tile-layer.js"}