"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tile = void 0;
var KeyValueObject = {};

KeyValueObject.read = function (pbf, end) {
  return pbf.readFields(KeyValueObject._readField, {
    key: '',
    value: ''
  }, end);
};

KeyValueObject._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.key = pbf.readString();else if (tag === 2) obj.value = pbf.readString();
};

var Properties = {};

Properties.read = function (pbf, end) {
  return pbf.readFields(Properties._readField, {
    data: []
  }, end);
};

Properties._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.data.push(KeyValueObject.read(pbf, pbf.readVarint() + pbf.pos));
};

var Doubles = {};

Doubles.read = function (pbf, end) {
  var _pbf$readFields = pbf.readFields(Doubles._readField, {
    value: [],
    size: 0
  }, end),
      value = _pbf$readFields.value,
      size = _pbf$readFields.size;

  return {
    value: new Float32Array(value),
    size: size
  };
};

Doubles._readField = function (tag, obj, pbf) {
  if (tag === 1) pbf.readPackedDouble(obj.value);else if (tag === 2) obj.size = pbf.readVarint(true);
};

var Ints = {};

Ints.read = function (pbf, end) {
  var _pbf$readFields2 = pbf.readFields(Ints._readField, {
    value: [],
    size: 0
  }, end),
      value = _pbf$readFields2.value,
      size = _pbf$readFields2.size;

  return {
    value: new Uint32Array(value),
    size: size
  };
};

Ints._readField = function (tag, obj, pbf) {
  if (tag === 1) pbf.readPackedVarint(obj.value);else if (tag === 2) obj.size = pbf.readVarint(true);
};

var NumericProp = {};

NumericProp.read = function (pbf, end) {
  return pbf.readFields(NumericProp._readField, {
    value: []
  }, end);
};

NumericProp._readField = function (tag, obj, pbf) {
  if (tag === 1) pbf.readPackedDouble(obj.value);
};

var NumericPropKeyValue = {};

NumericPropKeyValue.read = function (pbf, end) {
  return pbf.readFields(NumericPropKeyValue._readField, {
    key: '',
    value: null
  }, end);
};

NumericPropKeyValue._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.key = pbf.readString();else if (tag === 2) obj.value = NumericProp.read(pbf, pbf.readVarint() + pbf.pos);
};

NumericProp._FieldEntry1 = {};

NumericProp._FieldEntry1.read = function (pbf, end) {
  return pbf.readFields(NumericProp._FieldEntry1._readField, {
    key: '',
    value: 0
  }, end);
};

NumericProp._FieldEntry1._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.key = pbf.readString();else if (tag === 2) obj.value = pbf.readDouble();
};

var StringProp = {};

StringProp.read = function (pbf, end) {
  return pbf.readFields(StringProp._readField, {
    value: []
  }, end);
};

StringProp._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.value.push(pbf.readString());
};

var Points = {};

Points.read = function (pbf, end) {
  return pbf.readFields(Points._readField, {
    positions: null,
    globalFeatureIds: null,
    featureIds: null,
    properties: [],
    numericProps: {}
  }, end);
};

Points._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.positions = Doubles.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 2) obj.globalFeatureIds = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 3) obj.featureIds = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 4) obj.properties.push(Properties.read(pbf, pbf.readVarint() + pbf.pos));else if (tag === 5) {
    var entry = NumericPropKeyValue.read(pbf, pbf.readVarint() + pbf.pos);
    obj.numericProps[entry.key] = entry.value;
  }
};

var Lines = {};

Lines.read = function (pbf, end) {
  return pbf.readFields(Lines._readField, {
    positions: null,
    pathIndices: null,
    globalFeatureIds: null,
    featureIds: null,
    properties: [],
    numericProps: {}
  }, end);
};

Lines._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.positions = Doubles.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 2) obj.pathIndices = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 3) obj.globalFeatureIds = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 4) obj.featureIds = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 5) obj.properties.push(Properties.read(pbf, pbf.readVarint() + pbf.pos));else if (tag === 6) {
    var entry = NumericPropKeyValue.read(pbf, pbf.readVarint() + pbf.pos);
    obj.numericProps[entry.key] = entry.value;
  }
};

var Polygons = {};

Polygons.read = function (pbf, end) {
  return pbf.readFields(Polygons._readField, {
    positions: null,
    polygonIndices: null,
    globalFeatureIds: null,
    featureIds: null,
    primitivePolygonIndices: null,
    triangles: null,
    properties: [],
    numericProps: {}
  }, end);
};

Polygons._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.positions = Doubles.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 2) obj.polygonIndices = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 3) obj.globalFeatureIds = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 4) obj.featureIds = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 5) obj.primitivePolygonIndices = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 6) obj.triangles = Ints.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 7) obj.properties.push(Properties.read(pbf, pbf.readVarint() + pbf.pos));else if (tag === 8) {
    var entry = NumericPropKeyValue.read(pbf, pbf.readVarint() + pbf.pos);
    obj.numericProps[entry.key] = entry.value;
  }
};

var Tile = {};
exports.Tile = Tile;

Tile.read = function (pbf, end) {
  return pbf.readFields(Tile._readField, {
    points: null,
    lines: null,
    polygons: null
  }, end);
};

Tile._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.points = Points.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 2) obj.lines = Lines.read(pbf, pbf.readVarint() + pbf.pos);else if (tag === 3) obj.polygons = Polygons.read(pbf, pbf.readVarint() + pbf.pos);
};
//# sourceMappingURL=carto-tile.js.map