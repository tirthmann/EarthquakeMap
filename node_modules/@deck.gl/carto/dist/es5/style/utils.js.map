{"version":3,"sources":["../../../src/style/utils.ts"],"names":["ALLOWED_ATTR_TYPES","Object","freeze","getAttrValue","attr","d","assert","includes","properties","condition","message","Error"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc,CAAC,UAAD,EAAa,QAAb,CAAd,CAA3B;;AAKO,SAASC,YAAT,CAAsBC,IAAtB,EAA+CC,CAA/C,EAAgE;AACrEC,EAAAA,MAAM,CAAC,sBAAOD,CAAP,MAAa,QAAd,EAAwB,iCAAxB,CAAN;AACAC,EAAAA,MAAM,CAACN,kBAAkB,CAACO,QAAnB,uBAAmCH,IAAnC,EAAD,EAA2C,4CAA3C,CAAN;;AAGA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAOA,IAAI,CAACC,CAAD,CAAX;AACD;;AACD,SAAOA,CAAC,CAACG,UAAF,CAAaJ,IAAb,CAAP;AACD;;AAEM,SAASE,MAAT,CAAgBG,SAAhB,EAA4D;AAAA,MAAjCC,OAAiC,uEAAvB,EAAuB;;AACjE,MAAI,CAACD,SAAL,EAAgB;AACd,UAAM,IAAIE,KAAJ,8BAAgCD,OAAhC,EAAN;AACD;AACF","sourcesContent":["const ALLOWED_ATTR_TYPES = Object.freeze(['function', 'string']);\n\ntype Row = {properties: Record<string, unknown>};\nexport type AttributeSelector = string | ((d: Row) => unknown);\n\nexport function getAttrValue(attr: AttributeSelector, d: Row): unknown {\n  assert(typeof d === 'object', 'Expected \"data\" to be an object');\n  assert(ALLOWED_ATTR_TYPES.includes(typeof attr), 'Expected \"attr\" to be a function or string');\n\n  // Is function\n  if (typeof attr === 'function') {\n    return attr(d);\n  }\n  return d.properties[attr];\n}\n\nexport function assert(condition, message = ''): asserts condition {\n  if (!condition) {\n    throw new Error(`CARTO style error: ${message}`);\n  }\n}\n"],"file":"utils.js"}