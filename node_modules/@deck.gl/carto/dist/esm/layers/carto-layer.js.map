{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["CompositeLayer","log","CartoTileLayer","MVTLayer","GeoJsonLayer","fetchLayerData","getDataV2","API_VERSIONS","FORMATS","MAP_TYPES","TILE_FORMATS","getDefaultCredentials","defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","uniqueIdProperty","credentials","connection","format","formatTiles","clientId","geoColumn","columns","CartoLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","assert","Object","values","includes","V1","V2","QUERY","TILESET","V3","TABLE","Array","isArray","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","rest","localConfig","result","err","_getSubLayerAndProps","TILEJSON","tileUrl","URL","tiles","searchParams","get","MVT","renderLayers","updateTriggers","layer","getSubLayerProps","id","layerName"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,GAAxB,QAAkC,eAAlC;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,cAAR,EAAwBC,SAAxB,EAAmCC,YAAnC,QAAsD,QAAtD;AACA,SAAQC,OAAR,EAAiBC,SAAjB,EAA4BC,YAA5B,QAA+C,wBAA/C;AACA,SAAQC,qBAAR,QAAoC,WAApC;AAEA,MAAMC,YAAY,GAAG;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAInBC,EAAAA,IAAI,EAAE,IAJa;AAKnBC,EAAAA,UAAU,EAAE;AAACD,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEH,IAAI,IAAI,CAAE,CAApC;AAAsCI,IAAAA,OAAO,EAAE;AAA/C,GALO;AAMnBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE,IAA1B;AAAgCC,IAAAA,OAAO,EAAE,KAAzC;AAAgDE,IAAAA,QAAQ,EAAE;AAA1D,GANM;AAOnBC,EAAAA,gBAAgB,EAAE,YAPC;AAUnBC,EAAAA,WAAW,EAAE,IAVM;AAgBnBC,EAAAA,UAAU,EAAE,IAhBO;AAmBnBC,EAAAA,MAAM,EAAE,IAnBW;AAsBnBC,EAAAA,WAAW,EAAE,IAtBM;AAyBnBC,EAAAA,QAAQ,EAAE,IAzBS;AA4BnBC,EAAAA,SAAS,EAAE,IA5BQ;AA+BnBC,EAAAA,OAAO,EAAE;AAACb,IAAAA,IAAI,EAAE,OAAP;AAAgBE,IAAAA,KAAK,EAAE;AAAvB;AA/BU,CAArB;AAkCA,eAAe,MAAMY,UAAN,SAAyB5B,cAAzB,CAAwC;AACrD6B,EAAAA,eAAe,GAAG;AAChB,SAAKC,KAAL,GAAa;AACXjB,MAAAA,IAAI,EAAE,IADK;AAEXkB,MAAAA,UAAU,EAAE;AAFD,KAAb;AAID;;AAEW,MAARC,QAAQ,GAAG;AACb,WAAO,KAAKC,YAAL,GAAoBC,MAApB,GAA6B,CAA7B,IAAkC,MAAMF,QAA/C;AACD;;AAEDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAM;AAACtB,MAAAA,IAAD;AAAOO,MAAAA,WAAP;AAAoBC,MAAAA,UAApB;AAAgCI,MAAAA,SAAhC;AAA2CC,MAAAA;AAA3C,QAAsDS,KAA5D;AACA,UAAMC,UAAU,GAAG,EAAC,GAAG1B,qBAAqB,EAAzB;AAA6B,SAAGU;AAAhC,KAAnB;AACA,UAAM;AAACU,MAAAA;AAAD,QAAeM,UAArB;AAEApC,IAAAA,GAAG,CAACqC,MAAJ,CACEC,MAAM,CAACC,MAAP,CAAcjC,YAAd,EAA4BkC,QAA5B,CAAqCV,UAArC,CADF,+BAEwBA,UAFxB;;AAKA,QAAIA,UAAU,KAAKxB,YAAY,CAACmC,EAA5B,IAAkCX,UAAU,KAAKxB,YAAY,CAACoC,EAAlE,EAAsE;AACpE1C,MAAAA,GAAG,CAACqC,MAAJ,CACExB,IAAI,KAAKL,SAAS,CAACmC,KAAnB,IAA4B9B,IAAI,KAAKL,SAAS,CAACoC,OADjD,yBAEkB/B,IAFlB,4EAEwFiB,UAFxF;AAIA9B,MAAAA,GAAG,CAACqC,MAAJ,CAAW,CAAChB,UAAZ,4DAA2ES,UAA3E;AACA9B,MAAAA,GAAG,CAACqC,MAAJ,CAAW,CAACZ,SAAZ,2DAAyEK,UAAzE;AACA9B,MAAAA,GAAG,CAACqC,MAAJ,CAAW,CAACX,OAAZ,yDAAqEI,UAArE;AACD,KARD,MAQO,IAAIA,UAAU,KAAKxB,YAAY,CAACuC,EAAhC,EAAoC;AACzC7C,MAAAA,GAAG,CAACqC,MAAJ,CAAWhB,UAAX,EAAuB,wCAAvB;AACArB,MAAAA,GAAG,CAACqC,MAAJ,CACEC,MAAM,CAACC,MAAP,CAAc/B,SAAd,EAAyBgC,QAAzB,CAAkC3B,IAAlC,CADF,yBAEkBA,IAFlB;;AAIA,UAAIA,IAAI,KAAKL,SAAS,CAACsC,KAAvB,EAA8B;AAC5B9C,QAAAA,GAAG,CAACqC,MAAJ,CAAW,CAACZ,SAAZ,sDAAoEjB,SAAS,CAACsC,KAA9E;AACA9C,QAAAA,GAAG,CAACqC,MAAJ,CAAW,CAACX,OAAZ,oDAAgElB,SAAS,CAACsC,KAA1E;AACD;;AACD,UAAIpB,OAAJ,EAAa;AACX1B,QAAAA,GAAG,CAACqC,MAAJ,CAAWU,KAAK,CAACC,OAAN,CAActB,OAAd,CAAX,EAAmC,+BAAnC;AACD;AACF;AACF;;AAEDuB,EAAAA,WAAW,CAAC;AAACd,IAAAA,KAAD;AAAQe,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,EAAiC;AAC1C,SAAKjB,WAAL,CAAiBC,KAAjB;;AACA,UAAMiB,gBAAgB,GACpBD,WAAW,CAACE,WAAZ,IACAlB,KAAK,CAACd,UAAN,KAAqB6B,QAAQ,CAAC7B,UAD9B,IAEAc,KAAK,CAACV,SAAN,KAAoByB,QAAQ,CAACzB,SAF7B,IAGAU,KAAK,CAACb,MAAN,KAAiB4B,QAAQ,CAAC5B,MAH1B,IAIAa,KAAK,CAACZ,WAAN,KAAsB2B,QAAQ,CAAC3B,WAJ/B,IAKAY,KAAK,CAACtB,IAAN,KAAeqC,QAAQ,CAACrC,IALxB,IAMAyC,IAAI,CAACC,SAAL,CAAepB,KAAK,CAACT,OAArB,MAAkC4B,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACxB,OAAxB,CANlC,IAOA4B,IAAI,CAACC,SAAL,CAAepB,KAAK,CAACf,WAArB,MAAsCkC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAAC9B,WAAxB,CARxC;;AAUA,QAAIgC,gBAAJ,EAAsB;AACpB,WAAKI,QAAL,CAAc;AAAC5C,QAAAA,IAAI,EAAE,IAAP;AAAakB,QAAAA,UAAU,EAAE;AAAzB,OAAd;;AACA,WAAK2B,WAAL;AACD;AACF;;AAEgB,QAAXA,WAAW,GAAG;AAClB,QAAI;AACF,YAAM;AAAC5C,QAAAA,IAAD;AAAOD,QAAAA,IAAI,EAAE8C,MAAb;AAAqBlC,QAAAA,QAArB;AAA+BJ,QAAAA,WAA/B;AAA4C,WAAGuC;AAA/C,UAAuD,KAAKxB,KAAlE;AACA,YAAMyB,WAAW,GAAG,EAAC,GAAGlD,qBAAqB,EAAzB;AAA6B,WAAGU;AAAhC,OAApB;AACA,YAAM;AAACU,QAAAA;AAAD,UAAe8B,WAArB;AAEA,UAAIC,MAAJ;;AACA,UAAI/B,UAAU,KAAKxB,YAAY,CAACmC,EAA5B,IAAkCX,UAAU,KAAKxB,YAAY,CAACoC,EAAlE,EAAsE;AACpEmB,QAAAA,MAAM,GAAG;AAACjD,UAAAA,IAAI,EAAE,MAAMP,SAAS,CAAC;AAACQ,YAAAA,IAAD;AAAO6C,YAAAA,MAAP;AAAetC,YAAAA;AAAf,WAAD;AAAtB,SAAT;AACD,OAFD,MAEO;AACLyC,QAAAA,MAAM,GAAG,MAAMzD,cAAc,CAAC;AAACS,UAAAA,IAAD;AAAO6C,UAAAA,MAAP;AAAelC,UAAAA,QAAf;AAAyBJ,UAAAA,WAAzB;AAAsC,aAAGuC;AAAzC,SAAD,CAA7B;AACD;;AAED,WAAKH,QAAL,CAAc,EAAC,GAAGK,MAAJ;AAAY/B,QAAAA;AAAZ,OAAd;AACA,WAAKK,KAAL,CAAWrB,UAAX,CAAsB+C,MAAM,CAACjD,IAA7B;AACD,KAdD,CAcE,OAAOkD,GAAP,EAAY;AACZ,UAAI,KAAK3B,KAAL,CAAWlB,WAAf,EAA4B;AAC1B,aAAKkB,KAAL,CAAWlB,WAAX,CAAuB6C,GAAvB;AACD,OAFD,MAEO;AACL,cAAMA,GAAN;AACD;AACF;AACF;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAACnD,MAAAA,IAAD;AAAOU,MAAAA,MAAP;AAAeQ,MAAAA;AAAf,QAA6B,KAAKD,KAAxC;AAEA,UAAM;AAACV,MAAAA;AAAD,QAAqBR,YAA3B;AACA,UAAMwB,KAAK,GAAG;AAAChB,MAAAA,gBAAD;AAAmB,SAAG,KAAKgB;AAA3B,KAAd;AACA,WAAOA,KAAK,CAACvB,IAAb;;AAEA,QAAIkB,UAAU,KAAKxB,YAAY,CAACmC,EAA5B,IAAkCX,UAAU,KAAKxB,YAAY,CAACoC,EAAlE,EAAsE;AACpE,aAAO,CAACxC,QAAD,EAAWiC,KAAX,CAAP;AACD;;AAED,QAAIb,MAAM,KAAKf,OAAO,CAACyD,QAAvB,EAAiC;AAE/B,YAAMC,OAAO,GAAG,IAAIC,GAAJ,CAAQtD,IAAI,CAACuD,KAAL,CAAW,CAAX,CAAR,CAAhB;AAEAhC,MAAAA,KAAK,CAACZ,WAAN,GACEY,KAAK,CAACZ,WAAN,IAAqB0C,OAAO,CAACG,YAAR,CAAqBC,GAArB,CAAyB,aAAzB,CAArB,IAAgE5D,YAAY,CAAC6D,GAD/E;AAGA,aAAOnC,KAAK,CAACZ,WAAN,KAAsBd,YAAY,CAAC6D,GAAnC,GAAyC,CAACpE,QAAD,EAAWiC,KAAX,CAAzC,GAA6D,CAAClC,cAAD,EAAiBkC,KAAjB,CAApE;AACD;;AAGD,WAAO,CAAChC,YAAD,EAAegC,KAAf,CAAP;AACD;;AAEDoC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAC3D,MAAAA;AAAD,QAAS,KAAKiB,KAApB;AAEA,QAAI,CAACjB,IAAL,EAAW,OAAO,IAAP;AAEX,UAAM;AAAC4D,MAAAA;AAAD,QAAmB,KAAKrC,KAA9B;;AAEA,UAAM,CAACsC,KAAD,EAAQtC,KAAR,IAAiB,KAAK4B,oBAAL,EAAvB;;AAGA,WAAO,IAAIU,KAAJ,CACLtC,KADK,EAEL,KAAKuC,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,kBAAWF,KAAK,CAACG,SAAjB,CADkB;AAEpBhE,MAAAA,IAFoB;AAGpB4D,MAAAA;AAHoB,KAAtB,CAFK,CAAP;AAQD;;AAnIoD;AAsIvD7C,UAAU,CAACiD,SAAX,GAAuB,YAAvB;AACAjD,UAAU,CAAChB,YAAX,GAA0BA,YAA1B","sourcesContent":["import {CompositeLayer, log} from '@deck.gl/core';\nimport CartoTileLayer from './carto-tile-layer';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {fetchLayerData, getDataV2, API_VERSIONS} from '../api';\nimport {FORMATS, MAP_TYPES, TILE_FORMATS} from '../api/maps-api-common';\nimport {getDefaultCredentials} from '../config';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n  uniqueIdProperty: 'cartodb_id',\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): format of data\n  format: null,\n\n  // (String, optional): force format of data for tiles\n  formatTiles: null,\n\n  // (String, optional): clientId identifier used for internal tracing, place here a string to identify the client who is doing the request.\n  clientId: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props) {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (type !== MAP_TYPES.TABLE) {\n        log.assert(!geoColumn, `geoColumn prop is only supported for type ${MAP_TYPES.TABLE}`);\n        log.assert(!columns, `columns prop is only supported for type ${MAP_TYPES.TABLE}`);\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      props.format !== oldProps.format ||\n      props.formatTiles !== oldProps.formatTiles ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const {type, data: source, clientId, credentials, ...rest} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let result;\n      if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        result = {data: await getDataV2({type, source, credentials})};\n      } else {\n        result = await fetchLayerData({type, source, clientId, credentials, ...rest});\n      }\n\n      this.setState({...result, apiVersion});\n      this.props.onDataLoad(result.data);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  _getSubLayerAndProps() {\n    const {data, format, apiVersion} = this.state;\n\n    const {uniqueIdProperty} = defaultProps;\n    const props = {uniqueIdProperty, ...this.props};\n    delete props.data;\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      return [MVTLayer, props];\n    }\n\n    if (format === FORMATS.TILEJSON) {\n      /* global URL */\n      const tileUrl = new URL(data.tiles[0]);\n\n      props.formatTiles =\n        props.formatTiles || tileUrl.searchParams.get('formatTiles') || TILE_FORMATS.MVT;\n\n      return props.formatTiles === TILE_FORMATS.MVT ? [MVTLayer, props] : [CartoTileLayer, props];\n    }\n\n    // It's a geojson layer\n    return [GeoJsonLayer, props];\n  }\n\n  renderLayers() {\n    const {data} = this.state;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    const [layer, props] = this._getSubLayerAndProps();\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}