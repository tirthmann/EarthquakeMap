{"version":3,"sources":["../../../src/layers/carto-tile-layer.js"],"names":["Protobuf","log","ClipExtension","MVTLayer","_getURLFromTemplate","GeoJsonLayer","geojsonToBinary","Tile","TILE_FORMATS","parseJSON","arrayBuffer","JSON","parse","TextDecoder","decode","parsePbf","buffer","pbf","tile","read","unpackProperties","properties","length","map","item","currentRecord","data","forEach","key","value","parseCartoTile","options","formatTiles","cartoTile","GEOJSON","features","points","lines","polygons","defaultTileFormat","BINARY","CartoTileLoader","name","id","module","extensions","mimeTypes","category","worker","parseSync","defaultProps","loaders","CartoTileLayer","getTileData","url","state","Promise","reject","loadOptions","getLoadOptions","fetch","props","signal","mimeType","assert","Object","values","includes","propName","layer","renderSubLayers","autoHighlight","bbox","west","south","east","north","clipBounds","subLayer","layerName"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport Protobuf from 'pbf';\nimport {log} from '@deck.gl/core';\nimport {ClipExtension} from '@deck.gl/extensions';\nimport {MVTLayer, _getURLFromTemplate} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {geojsonToBinary} from '@loaders.gl/gis';\nimport {Tile} from './schema/carto-tile';\nimport {TILE_FORMATS} from '../api/maps-api-common';\n\nfunction parseJSON(arrayBuffer) {\n  return JSON.parse(new TextDecoder().decode(arrayBuffer));\n}\n\nfunction parsePbf(buffer) {\n  const pbf = new Protobuf(buffer);\n  const tile = Tile.read(pbf);\n  return tile;\n}\n\nfunction unpackProperties(properties) {\n  if (!properties || !properties.length) {\n    return [];\n  }\n  return properties.map(item => {\n    const currentRecord = {};\n    item.data.forEach(({key, value}) => {\n      currentRecord[key] = value;\n    });\n    return currentRecord;\n  });\n}\n\nfunction parseCartoTile(arrayBuffer, options) {\n  if (!arrayBuffer) return null;\n  const formatTiles = options && options.cartoTile && options.cartoTile.formatTiles;\n  if (formatTiles === TILE_FORMATS.GEOJSON) return geojsonToBinary(parseJSON(arrayBuffer).features);\n\n  const tile = parsePbf(arrayBuffer);\n\n  const {points, lines, polygons} = tile;\n  const data = {\n    points: {...points, properties: unpackProperties(points.properties)},\n    lines: {...lines, properties: unpackProperties(lines.properties)},\n    polygons: {...polygons, properties: unpackProperties(polygons.properties)}\n  };\n\n  return data;\n}\n\nconst defaultTileFormat = TILE_FORMATS.BINARY;\n\nconst CartoTileLoader = {\n  name: 'CARTO Tile',\n  id: 'cartoTile',\n  module: 'carto',\n  extensions: ['pbf'],\n  mimeTypes: ['application/x-protobuf'],\n  category: 'geometry',\n  worker: false,\n  parse: async (arrayBuffer, options) => parseCartoTile(arrayBuffer, options),\n  parseSync: parseCartoTile,\n  options: {\n    cartoTile: {\n      formatTiles: defaultTileFormat\n    }\n  }\n};\n\nconst defaultProps = {\n  ...MVTLayer.defaultProps,\n  formatTiles: defaultTileFormat,\n  loaders: [CartoTileLoader]\n};\n\nexport default class CartoTileLayer extends MVTLayer {\n  getTileData(tile) {\n    const url = _getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n\n    let loadOptions = this.getLoadOptions();\n    const {fetch, formatTiles} = this.props;\n    const {signal} = tile;\n\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf'\n    };\n\n    if (formatTiles) {\n      log.assert(\n        Object.values(TILE_FORMATS).includes(formatTiles),\n        `Invalid value for formatTiles: ${formatTiles}. Use value from TILE_FORMATS`\n      );\n      loadOptions.cartoTile = {formatTiles};\n    }\n\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(props) {\n    if (props.data === null) {\n      return null;\n    }\n\n    props.autoHighlight = false;\n\n    const {\n      bbox: {west, south, east, north}\n    } = props.tile;\n    props.extensions = [new ClipExtension(), ...(props.extensions || [])];\n    props.clipBounds = [west, south, east, north];\n\n    const subLayer = new GeoJsonLayer({\n      ...props\n    });\n    return subLayer;\n  }\n}\n\nCartoTileLayer.layerName = 'CartoTileLayer';\nCartoTileLayer.defaultProps = defaultProps;\n"],"file":"carto-tile-layer.js"}