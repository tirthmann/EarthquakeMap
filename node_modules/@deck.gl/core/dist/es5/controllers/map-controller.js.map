{"version":3,"sources":["../../../src/controllers/map-controller.ts"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","position","MapState","options","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","_state","pos","_getUpdatedState","_unproject","startPos","viewport","_viewportProps","newProps","panByPosition","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","scale","_calculateNewZoom","zoomedViewport","speed","_zoomFromCenter","_panFromCenter","viewState","fromProps","getViewportProps","props","Math","abs","offset","pan","constructor","Object","assign","unproject","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","min","max","ViewState","MapController","dragMode","oldProps","controllerStateProps","dimensionChanged","updateViewport","ControllerState","Controller"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60,\n  position: [0, 0, 0]\n};\n\ntype MapStateProps = {\n  makeViewport;\n\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width;\n  /** The height of the viewport */\n  height;\n  /** The latitude at the center of the viewport */\n  latitude;\n  /** The longitude at the center of the viewport */\n  longitude;\n  /** The tile zoom level of the map. */\n  zoom;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat;\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat;\n  /* Pointer position when rotation started */\n  startRotatePos;\n  /** Bearing when current perspective rotate operation started */\n  startBearing;\n  /** Pitch when current perspective rotate operation started */\n  startPitch;\n  /** Zoom when current zoom operation started */\n  startZoom;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor(options?: MapStateProps) {\n    // @ts-expect-error\n    options = {...DEFAULT_STATE, ...options};\n    const {\n      makeViewport,\n\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing,\n      /** The pitch of the viewport in degrees */\n      pitch,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude,\n      /** Viewport position */\n      position,\n\n      /** Viewport constraints */\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport. Default `true` */\n      normalize\n    } = options || {};\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'];\n  }\n}\n"],"file":"map-controller.js"}