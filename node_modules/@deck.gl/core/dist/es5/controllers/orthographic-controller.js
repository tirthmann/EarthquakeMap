"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@math.gl/core");

var _controller = _interopRequireDefault(require("./controller"));

var _orbitController = require("./orbit-controller");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var OrthographicState = function (_OrbitState) {
  (0, _inherits2.default)(OrthographicState, _OrbitState);

  var _super = _createSuper(OrthographicState);

  function OrthographicState(props) {
    var _this;

    (0, _classCallCheck2.default)(this, OrthographicState);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "zoomAxis", void 0);
    _this.zoomAxis = props.zoomAxis || 'all';
    return _this;
  }

  (0, _createClass2.default)(OrthographicState, [{
    key: "_applyConstraints",
    value: function _applyConstraints(props) {
      var maxZoom = props.maxZoom,
          minZoom = props.minZoom,
          zoom = props.zoom;
      props.zoom = Array.isArray(zoom) ? [(0, _core.clamp)(zoom[0], minZoom, maxZoom), (0, _core.clamp)(zoom[1], minZoom, maxZoom)] : (0, _core.clamp)(zoom, minZoom, maxZoom);
      return props;
    }
  }, {
    key: "_calculateNewZoom",
    value: function _calculateNewZoom(_ref) {
      var scale = _ref.scale,
          startZoom = _ref.startZoom;
      var _this$_viewportProps = this._viewportProps,
          maxZoom = _this$_viewportProps.maxZoom,
          minZoom = _this$_viewportProps.minZoom;

      if (!startZoom && startZoom !== 0) {
        startZoom = this._viewportProps.zoom;
      }

      var deltaZoom = Math.log2(scale);

      if (Array.isArray(startZoom)) {
        var _startZoom = startZoom,
            _startZoom2 = (0, _slicedToArray2.default)(_startZoom, 2),
            newZoomX = _startZoom2[0],
            newZoomY = _startZoom2[1];

        switch (this.zoomAxis) {
          case 'X':
            newZoomX = (0, _core.clamp)(newZoomX + deltaZoom, minZoom, maxZoom);
            break;

          case 'Y':
            newZoomY = (0, _core.clamp)(newZoomY + deltaZoom, minZoom, maxZoom);
            break;

          default:
            var z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);

            if (z < minZoom) {
              deltaZoom += minZoom - z;
            }

            z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);

            if (z > maxZoom) {
              deltaZoom += maxZoom - z;
            }

            newZoomX += deltaZoom;
            newZoomY += deltaZoom;
        }

        return [newZoomX, newZoomY];
      }

      return (0, _core.clamp)(startZoom + deltaZoom, minZoom, maxZoom);
    }
  }]);
  return OrthographicState;
}(_orbitController.OrbitState);

var OrthographicController = function (_Controller) {
  (0, _inherits2.default)(OrthographicController, _Controller);

  var _super2 = _createSuper(OrthographicController);

  function OrthographicController(props) {
    (0, _classCallCheck2.default)(this, OrthographicController);
    props.dragMode = props.dragMode || 'pan';
    return _super2.call(this, OrthographicState, props);
  }

  (0, _createClass2.default)(OrthographicController, [{
    key: "_onPanRotate",
    value: function _onPanRotate(event) {
      return false;
    }
  }, {
    key: "linearTransitionProps",
    get: function get() {
      return ['target', 'zoom'];
    }
  }]);
  return OrthographicController;
}(_controller.default);

exports.default = OrthographicController;
//# sourceMappingURL=orthographic-controller.js.map