{"version":3,"sources":["../../../src/controllers/orthographic-controller.ts"],"names":["OrthographicState","props","zoomAxis","maxZoom","minZoom","zoom","Array","isArray","scale","startZoom","_viewportProps","deltaZoom","Math","log2","newZoomX","newZoomY","z","min","max","OrbitState","OrthographicController","dragMode","event","Controller"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _applyConstraints(props) {\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n    return props;\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!startZoom && startZoom !== 0) {\n      startZoom = this._viewportProps.zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(OrthographicState, props);\n  }\n\n  _onPanRotate(event) {\n    // No rotation in orthographic view\n    return false;\n  }\n\n  get linearTransitionProps(): string[] | null {\n    return ['target', 'zoom'];\n  }\n}\n"],"file":"orthographic-controller.js"}