{"version":3,"sources":["../../../../src/effects/mask/mask-effect.js"],"names":["MaskEffect","props","dummyMaskMap","useInPicking","channels","masks","gl","layers","layerFilter","viewports","onViewportActive","views","Texture2D","width","height","maskLayers","filter","l","operation","OPERATION","MASK","visible","length","maskPass","MaskPass","id","maskMap","channelMap","_sortMaskChannels","viewport","viewportChanged","lastViewport","equals","maskId","_renderChannel","channelInfo","oldChannelInfo","index","maskChanged","layerBounds","some","b","i","bounds","maskBounds","maskViewport","getBounds","render","channel","moduleParameters","devicePixelRatio","coordinateOrigin","coordinateSystem","channelCount","layer","root","log","warn","findIndex","c","push","maskChannels","delete","Effect"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IAGqBA,U;;;;;AACnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;AACA,UAAKC,YAAL,GAAoB,IAApB;AACA,UAAKC,YAAL,GAAoB,IAApB;AACA,UAAKC,QAAL,GAAgB,EAAhB;AACA,UAAKC,KAAL,GAAa,IAAb;AALiB;AAMlB;;;;WAED,mBAAUC,EAAV,QAAyE;AAAA,UAA1DC,MAA0D,QAA1DA,MAA0D;AAAA,UAAlDC,WAAkD,QAAlDA,WAAkD;AAAA,UAArCC,SAAqC,QAArCA,SAAqC;AAAA,UAA1BC,gBAA0B,QAA1BA,gBAA0B;AAAA,UAARC,KAAQ,QAARA,KAAQ;;AACvE,UAAI,CAAC,KAAKT,YAAV,EAAwB;AACtB,aAAKA,YAAL,GAAoB,IAAIU,eAAJ,CAAcN,EAAd,EAAkB;AACpCO,UAAAA,KAAK,EAAE,CAD6B;AAEpCC,UAAAA,MAAM,EAAE;AAF4B,SAAlB,CAApB;AAID;;AAED,UAAMC,UAAU,GAAGR,MAAM,CAACS,MAAP,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAChB,KAAF,CAAQiB,SAAR,KAAsBC,qBAAUC,IAAhC,IAAwCH,CAAC,CAAChB,KAAF,CAAQoB,OAApD;AAAA,OAAf,CAAnB;;AACA,UAAIN,UAAU,CAACO,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAKjB,KAAL,GAAa,IAAb;AACA,aAAKD,QAAL,CAAckB,MAAd,GAAuB,CAAvB;AACA;AACD;;AACD,WAAKjB,KAAL,GAAa,EAAb;;AAEA,UAAI,CAAC,KAAKkB,QAAV,EAAoB;AAClB,aAAKA,QAAL,GAAgB,IAAIC,iBAAJ,CAAalB,EAAb,EAAiB;AAACmB,UAAAA,EAAE,EAAE;AAAL,SAAjB,CAAhB;AACA,aAAKC,OAAL,GAAe,KAAKH,QAAL,CAAcG,OAA7B;AACD;;AAGD,UAAMC,UAAU,GAAG,KAAKC,iBAAL,CAAuBb,UAAvB,CAAnB;;AAEA,UAAMc,QAAQ,GAAGpB,SAAS,CAAC,CAAD,CAA1B;AACA,UAAMqB,eAAe,GAAG,CAAC,KAAKC,YAAN,IAAsB,CAAC,KAAKA,YAAL,CAAkBC,MAAlB,CAAyBH,QAAzB,CAA/C;;AAEA,WAAK,IAAMI,MAAX,IAAqBN,UAArB,EAAiC;AAC/B,aAAKO,cAAL,CAAoBP,UAAU,CAACM,MAAD,CAA9B,EAAwC;AACtCzB,UAAAA,WAAW,EAAXA,WADsC;AAEtCE,UAAAA,gBAAgB,EAAhBA,gBAFsC;AAGtCC,UAAAA,KAAK,EAALA,KAHsC;AAItCkB,UAAAA,QAAQ,EAARA,QAJsC;AAKtCC,UAAAA,eAAe,EAAfA;AALsC,SAAxC;AAOD;AA2BF;;;WAED,wBAAeK,WAAf,SAA+F;AAAA,UAAlE3B,WAAkE,SAAlEA,WAAkE;AAAA,UAArDE,gBAAqD,SAArDA,gBAAqD;AAAA,UAAnCC,KAAmC,SAAnCA,KAAmC;AAAA,UAA5BkB,QAA4B,SAA5BA,QAA4B;AAAA,UAAlBC,eAAkB,SAAlBA,eAAkB;AAC7F,UAAMM,cAAc,GAAG,KAAKhC,QAAL,CAAc+B,WAAW,CAACE,KAA1B,CAAvB;AACA,UAAMC,WAAW,GAEfH,WAAW,KAAKC,cAAhB,IAEAA,cAAc,CAAC7B,MAAf,CAAsBe,MAAtB,KAAiCa,WAAW,CAAC5B,MAAZ,CAAmBe,MAFpD,IAIAa,WAAW,CAACI,WAAZ,CAAwBC,IAAxB,CAA6B,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,KAAKL,cAAc,CAACG,WAAf,CAA2BG,CAA3B,CAAhB;AAAA,OAA7B,CANF;AAQAP,MAAAA,WAAW,CAACQ,MAAZ,GAAqBP,cAAc,CAACO,MAApC;AACAR,MAAAA,WAAW,CAACS,UAAZ,GAAyBR,cAAc,CAACQ,UAAxC;AACA,WAAKxC,QAAL,CAAc+B,WAAW,CAACE,KAA1B,IAAmCF,WAAnC;;AAEA,UAAIG,WAAW,IAAIR,eAAnB,EAAoC;AAElC,aAAKC,YAAL,GAAoBF,QAApB;AAEAM,QAAAA,WAAW,CAACQ,MAAZ,GAAqB,0BAAc;AAACpC,UAAAA,MAAM,EAAE4B,WAAW,CAAC5B,MAArB;AAA6BsB,UAAAA,QAAQ,EAARA;AAA7B,SAAd,CAArB;;AAEA,YAAIS,WAAW,IAAI,CAAC,mBAAOH,WAAW,CAACQ,MAAnB,EAA2BP,cAAc,CAACO,MAA1C,CAApB,EAAuE;AAErE,cAAOpB,QAAP,GAA4B,IAA5B,CAAOA,QAAP;AAAA,cAAiBG,OAAjB,GAA4B,IAA5B,CAAiBA,OAAjB;AAEA,cAAMmB,YAAY,GAAG,4BAAgB;AACnCF,YAAAA,MAAM,EAAER,WAAW,CAACQ,MADe;AAEnCd,YAAAA,QAAQ,EAARA,QAFmC;AAGnChB,YAAAA,KAAK,EAAEa,OAAO,CAACb,KAHoB;AAInCC,YAAAA,MAAM,EAAEY,OAAO,CAACZ;AAJmB,WAAhB,CAArB;AAOAqB,UAAAA,WAAW,CAACS,UAAZ,GAAyBC,YAAY,GAAGA,YAAY,CAACC,SAAb,EAAH,GAA8B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnE;AAEAvB,UAAAA,QAAQ,CAACwB,MAAT,CAAgB;AACdC,YAAAA,OAAO,EAAEb,WAAW,CAACE,KADP;AAEd9B,YAAAA,MAAM,EAAE4B,WAAW,CAAC5B,MAFN;AAGdC,YAAAA,WAAW,EAAXA,WAHc;AAIdC,YAAAA,SAAS,EAAEoC,YAAY,GAAG,CAACA,YAAD,CAAH,GAAoB,EAJ7B;AAKdnC,YAAAA,gBAAgB,EAAhBA,gBALc;AAMdC,YAAAA,KAAK,EAALA,KANc;AAOdsC,YAAAA,gBAAgB,EAAE;AAChBC,cAAAA,gBAAgB,EAAE;AADF;AAPJ,WAAhB;AAWD;AACF;;AAED,WAAK7C,KAAL,CAAW8B,WAAW,CAACV,EAAvB,IAA6B;AAC3BY,QAAAA,KAAK,EAAEF,WAAW,CAACE,KADQ;AAE3BM,QAAAA,MAAM,EAAER,WAAW,CAACS,UAFO;AAG3BO,QAAAA,gBAAgB,EAAEhB,WAAW,CAACgB,gBAHH;AAI3BC,QAAAA,gBAAgB,EAAEjB,WAAW,CAACiB;AAJH,OAA7B;AAMD;;;WAQD,2BAAkBrC,UAAlB,EAA8B;AAAA;;AAC5B,UAAMY,UAAU,GAAG,EAAnB;AACA,UAAI0B,YAAY,GAAG,CAAnB;;AAF4B,iDAGRtC,UAHQ;AAAA;;AAAA;AAAA;AAAA,cAGjBuC,KAHiB;AAI1B,cAAO7B,EAAP,GAAa6B,KAAK,CAACC,IAAnB,CAAO9B,EAAP;AACA,cAAIU,WAAW,GAAGR,UAAU,CAACF,EAAD,CAA5B;;AACA,cAAI,CAACU,WAAL,EAAkB;AAChB,gBAAI,EAAEkB,YAAF,GAAiB,CAArB,EAAwB;AACtBG,2BAAIC,IAAJ,CAAS,8CAAT;;AACA;AACD;;AACDtB,YAAAA,WAAW,GAAG;AACZV,cAAAA,EAAE,EAAFA,EADY;AAEZY,cAAAA,KAAK,EAAE,MAAI,CAACjC,QAAL,CAAcsD,SAAd,CAAwB,UAAAC,CAAC;AAAA,uBAAI,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAElC,EAAH,MAAUA,EAAd;AAAA,eAAzB,CAFK;AAGZlB,cAAAA,MAAM,EAAE,EAHI;AAIZgC,cAAAA,WAAW,EAAE,EAJD;AAKZY,cAAAA,gBAAgB,EAAEG,KAAK,CAACC,IAAN,CAAWtD,KAAX,CAAiBkD,gBALvB;AAMZC,cAAAA,gBAAgB,EAAEE,KAAK,CAACC,IAAN,CAAWtD,KAAX,CAAiBmD;AANvB,aAAd;AAQAzB,YAAAA,UAAU,CAACF,EAAD,CAAV,GAAiBU,WAAjB;AACD;;AACDA,UAAAA,WAAW,CAAC5B,MAAZ,CAAmBqD,IAAnB,CAAwBN,KAAxB;AACAnB,UAAAA,WAAW,CAACI,WAAZ,CAAwBqB,IAAxB,CAA6BN,KAAK,CAACR,SAAN,EAA7B;AAtB0B;;AAG5B,4DAAgC;AAAA;;AAAA,mCAM1B;AAcL;AAvB2B;AAAA;AAAA;AAAA;AAAA;;AAyB5B,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMP,WAAW,GAAG,KAAK/B,QAAL,CAAcsC,CAAd,CAApB;;AACA,YAAI,CAACP,WAAD,IAAgB,EAAEA,WAAW,CAACV,EAAZ,IAAkBE,UAApB,CAApB,EAAqD;AAEnD,eAAKvB,QAAL,CAAcsC,CAAd,IAAmB,IAAnB;AACD;AACF;;AAED,WAAK,IAAMT,MAAX,IAAqBN,UAArB,EAAiC;AAC/B,YAAMQ,YAAW,GAAGR,UAAU,CAACM,MAAD,CAA9B;;AAEA,YAAIE,YAAW,CAACE,KAAZ,GAAoB,CAAxB,EAA2B;AACzBF,UAAAA,YAAW,CAACE,KAAZ,GAAoB,KAAKjC,QAAL,CAAcsD,SAAd,CAAwB,UAAAC,CAAC;AAAA,mBAAI,CAACA,CAAL;AAAA,WAAzB,CAApB;AACA,eAAKvD,QAAL,CAAc+B,YAAW,CAACE,KAA1B,IAAmCF,YAAnC;AACD;AACF;;AACD,aAAOR,UAAP;AACD;;;WAED,+BAAsB;AACpB,aAAO;AACLD,QAAAA,OAAO,EAAE,KAAKrB,KAAL,GAAa,KAAKqB,OAAlB,GAA4B,KAAKxB,YADrC;AAEL2D,QAAAA,YAAY,EAAE,KAAKxD;AAFd,OAAP;AAID;;;WAED,mBAAU;AACR,UAAI,KAAKH,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkB4D,MAAlB;AACA,aAAK5D,YAAL,GAAoB,IAApB;AACD;;AAED,UAAI,KAAKqB,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcuC,MAAd;AACA,aAAKvC,QAAL,GAAgB,IAAhB;AACA,aAAKG,OAAL,GAAe,IAAf;AACD;;AAED,WAAKK,YAAL,GAAoB,IAApB;AACA,WAAK1B,KAAL,GAAa,IAAb;AACA,WAAKD,QAAL,CAAckB,MAAd,GAAuB,CAAvB;AACD;;;EAxMqCyC,e","sourcesContent":["import {Texture2D} from '@luma.gl/core';\n// import {readPixelsToArray} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport MaskPass from '../../passes/mask-pass';\nimport Effect from '../../lib/effect';\nimport {OPERATION} from '../../lib/constants';\nimport {getMaskBounds, getMaskViewport} from './utils';\nimport log from '../../utils/log';\n\n// Class to manage mask effect\nexport default class MaskEffect extends Effect {\n  constructor(props) {\n    super(props);\n    this.dummyMaskMap = null;\n    this.useInPicking = true;\n    this.channels = [];\n    this.masks = null;\n  }\n\n  preRender(gl, {layers, layerFilter, viewports, onViewportActive, views}) {\n    if (!this.dummyMaskMap) {\n      this.dummyMaskMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    const maskLayers = layers.filter(l => l.props.operation === OPERATION.MASK && l.props.visible);\n    if (maskLayers.length === 0) {\n      this.masks = null;\n      this.channels.length = 0;\n      return;\n    }\n    this.masks = {};\n\n    if (!this.maskPass) {\n      this.maskPass = new MaskPass(gl, {id: 'default-mask'});\n      this.maskMap = this.maskPass.maskMap;\n    }\n\n    // Map layers to channels\n    const channelMap = this._sortMaskChannels(maskLayers);\n    // TODO - support multiple views\n    const viewport = viewports[0];\n    const viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport);\n\n    for (const maskId in channelMap) {\n      this._renderChannel(channelMap[maskId], {\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n    }\n\n    // // Debug show FBO contents on screen\n    // const color = readPixelsToArray(this.maskMap);\n    // let canvas = document.getElementById('fbo-canvas');\n    // if (!canvas) {\n    //   canvas = document.createElement('canvas');\n    //   canvas.id = 'fbo-canvas';\n    //   canvas.width = this.maskMap.width;\n    //   canvas.height = this.maskMap.height;\n    //   canvas.style.zIndex = 100;\n    //   canvas.style.position = 'absolute';\n    //   canvas.style.right = 0;\n    //   canvas.style.border = 'blue 1px solid';\n    //   canvas.style.width = '256px';\n    //   canvas.style.transform = 'scaleY(-1)';\n    //   document.body.appendChild(canvas);\n    // }\n    // const ctx = canvas.getContext('2d');\n    // const imageData = ctx.createImageData(this.maskMap.width, this.maskMap.height);\n    // for (let i = 0; i < color.length; i += 4) {\n    //   imageData.data[i + 0] = color[i + 0];\n    //   imageData.data[i + 1] = color[i + 1];\n    //   imageData.data[i + 2] = color[i + 2];\n    //   imageData.data[i + 3] = color[i + 3] + 128;\n    // }\n    // ctx.putImageData(imageData, 0, 0);\n  }\n\n  _renderChannel(channelInfo, {layerFilter, onViewportActive, views, viewport, viewportChanged}) {\n    const oldChannelInfo = this.channels[channelInfo.index];\n    const maskChanged =\n      // If a channel is new\n      channelInfo === oldChannelInfo ||\n      // If sublayers have changed\n      oldChannelInfo.layers.length !== channelInfo.layers.length ||\n      // If a sublayer's positions have been updated, the cached bounds will change shallowly\n      channelInfo.layerBounds.some((b, i) => b !== oldChannelInfo.layerBounds[i]);\n\n    channelInfo.bounds = oldChannelInfo.bounds;\n    channelInfo.maskBounds = oldChannelInfo.maskBounds;\n    this.channels[channelInfo.index] = channelInfo;\n\n    if (maskChanged || viewportChanged) {\n      // Recalculate mask bounds\n      this.lastViewport = viewport;\n\n      channelInfo.bounds = getMaskBounds({layers: channelInfo.layers, viewport});\n\n      if (maskChanged || !equals(channelInfo.bounds, oldChannelInfo.bounds)) {\n        // Rerender mask FBO\n        const {maskPass, maskMap} = this;\n\n        const maskViewport = getMaskViewport({\n          bounds: channelInfo.bounds,\n          viewport,\n          width: maskMap.width,\n          height: maskMap.height\n        });\n\n        channelInfo.maskBounds = maskViewport ? maskViewport.getBounds() : [0, 0, 1, 1];\n\n        maskPass.render({\n          channel: channelInfo.index,\n          layers: channelInfo.layers,\n          layerFilter,\n          viewports: maskViewport ? [maskViewport] : [],\n          onViewportActive,\n          views,\n          moduleParameters: {\n            devicePixelRatio: 1\n          }\n        });\n      }\n    }\n\n    this.masks[channelInfo.id] = {\n      index: channelInfo.index,\n      bounds: channelInfo.maskBounds,\n      coordinateOrigin: channelInfo.coordinateOrigin,\n      coordinateSystem: channelInfo.coordinateSystem\n    };\n  }\n\n  /**\n   * Find a channel to render each mask into\n   * If a maskId already exists, diff and update the existing channel\n   * Otherwise replace a removed mask\n   * Otherwise create a new channel\n   */\n  _sortMaskChannels(maskLayers) {\n    const channelMap = {};\n    let channelCount = 0;\n    for (const layer of maskLayers) {\n      const {id} = layer.root;\n      let channelInfo = channelMap[id];\n      if (!channelInfo) {\n        if (++channelCount > 4) {\n          log.warn('Too many mask layers. The max supported is 4')();\n          continue; // eslint-disable-line no-continue\n        }\n        channelInfo = {\n          id,\n          index: this.channels.findIndex(c => c?.id === id),\n          layers: [],\n          layerBounds: [],\n          coordinateOrigin: layer.root.props.coordinateOrigin,\n          coordinateSystem: layer.root.props.coordinateSystem\n        };\n        channelMap[id] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n    }\n\n    for (let i = 0; i < 4; i++) {\n      const channelInfo = this.channels[i];\n      if (!channelInfo || !(channelInfo.id in channelMap)) {\n        // The mask id at this channel no longer exists\n        this.channels[i] = null;\n      }\n    }\n\n    for (const maskId in channelMap) {\n      const channelInfo = channelMap[maskId];\n\n      if (channelInfo.index < 0) {\n        channelInfo.index = this.channels.findIndex(c => !c);\n        this.channels[channelInfo.index] = channelInfo;\n      }\n    }\n    return channelMap;\n  }\n\n  getModuleParameters() {\n    return {\n      maskMap: this.masks ? this.maskMap : this.dummyMaskMap,\n      maskChannels: this.masks\n    };\n  }\n\n  cleanup() {\n    if (this.dummyMaskMap) {\n      this.dummyMaskMap.delete();\n      this.dummyMaskMap = null;\n    }\n\n    if (this.maskPass) {\n      this.maskPass.delete();\n      this.maskPass = null;\n      this.maskMap = null;\n    }\n\n    this.lastViewport = null;\n    this.masks = null;\n    this.channels.length = 0;\n  }\n}\n"],"file":"mask-effect.js"}