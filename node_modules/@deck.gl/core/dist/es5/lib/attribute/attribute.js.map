{"version":3,"sources":["../../../../src/lib/attribute/attribute.js"],"names":["Attribute","gl","opts","transition","noAlloc","update","accessor","transform","startIndices","Object","assign","settings","_autoUpdater","state","lastExternalBuffer","binaryValue","binaryAccessor","needsUpdate","needsRedraw","updateRanges","range","FULL","seal","_validateAttributeUpdaters","layout","clearChangedFlags","id","concat","Boolean","supportsTransition","layerSettings","userSettings","Array","isArray","find","a","reason","dataRange","setNeedsRedraw","startRow","endRow","Infinity","add","EMPTY","setData","numInstances","copy","data","props","context","updated","call","value","constant","buffer","byteLength","byteOffset","startOffset","Number","isFinite","getVertexOffset","endOffset","length","size","_checkAttributeArray","clearNeedsUpdate","undefined","hasChanged","ArrayBuffer","isView","needsNormalize","stride","offset","nested","row","vertexIndex","shaderAttributeDefs","shaderAttributes","shaderAttributeName","attribute","accessorFunc","i","iterable","objectInfo","object","index","objectValue","numVertices","startIndex","item","_normalizeValue","set","target","source","start","count","hasUpdater","Error","limit","Math","min","valid","DataColumn"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport {createIterable, getAccessorFromBuffer} from '../../utils/iterable-utils';\nimport {fillArray} from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport {normalizeTransitionSettings} from './attribute-transition-utils';\n\nexport default class Attribute extends DataColumn {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      startIndices = null\n    } = opts;\n\n    Object.assign(this.settings, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._autoUpdater),\n      accessor,\n      transform\n    });\n\n    Object.assign(this.state, {\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL,\n      startIndices\n    });\n\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.settings;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n    const {accessor} = this.settings;\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.settings.transition;\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? opts[accessor.find(a => opts[a])]\n      : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  update(opts) {\n    // backward compatibility\n    this.setData(opts);\n  }\n\n  allocate(numInstances) {\n    const {state, settings} = this;\n\n    if (settings.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate({\n        numInstances,\n        copy: state.updateRanges !== range.FULL\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {updateRanges},\n      settings: {update, noAlloc}\n    } = this;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances});\n      }\n      if (!this.value) {\n        // no value was assigned during update\n      } else if (\n        this.constant ||\n        this.buffer.byteLength < this.value.byteLength + this.byteOffset\n      ) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle\n        // Respect it here but reset after use\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n            ? this.value.length\n            : numInstances * this.size;\n\n          super.updateSubBuffer({startOffset, endOffset});\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value) {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({constant: true, value});\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer) {\n    const {state} = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  // Binary value is a typed array packed from mapping the source data with the accessor\n  // If the returned value from the accessor is the same as the attribute value, set it directly\n  // Otherwise use the auto updater for transform/normalization\n  setBinaryValue(buffer, startIndices = null) {\n    const {state, settings} = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      // Let the layer handle this\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    if (ArrayBuffer.isView(buffer)) {\n      buffer = {value: buffer};\n    }\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      assert(ArrayBuffer.isView(buffer.value), `invalid ${settings.accessor}`);\n      const needsNormalize = buffer.size && buffer.size !== this.size;\n\n      state.binaryAccessor = getAccessorFromBuffer(buffer.value, {\n        size: buffer.size || this.size,\n        stride: buffer.stride,\n        offset: buffer.offset,\n        startIndices,\n        nested: needsNormalize\n      });\n      // Fall through to auto updater\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {startIndices} = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {[this.id]: null};\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(\n        shaderAttributes,\n        super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])\n      );\n    }\n\n    return shaderAttributes;\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  _autoUpdater(attribute, {data, startRow, endRow, props, numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n    const {settings, state, value, size, startIndices} = attribute;\n\n    const {accessor, transform} = settings;\n    const accessorFunc =\n      state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices =\n          (objectInfo.index < startIndices.length - 1\n            ? startIndices[objectInfo.index + 1]\n            : numInstances) - startIndices[objectInfo.index];\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const {settings} = this;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  // check that the first few elements of the attribute are reasonable\n  /* eslint-disable no-fallthrough */\n  _checkAttributeArray() {\n    const {value} = this;\n    const limit = Math.min(4, this.size);\n    if (value && value.length >= limit) {\n      let valid = true;\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n  /* eslint-enable no-fallthrough */\n}\n"],"file":"attribute.js"}