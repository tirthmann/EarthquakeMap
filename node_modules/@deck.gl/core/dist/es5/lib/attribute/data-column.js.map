{"version":3,"sources":["../../../../src/lib/attribute/data-column.js"],"names":["getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","log","removed","vertexOffset","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","gl","opts","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","FEATURES","ELEMENT_INDEX_UINT32","defaultType","shaderAttributes","fp64","Float32Array","BYTES_PER_ELEMENT","value","settings","state","externalBuffer","bufferAccessor","allocatedValue","numInstances","bounds","constant","_buffer","setData","Buffer","target","getAccessor","n","delete","typedArrayManager","release","options","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","ShaderAttribute","shaderAttributeDef","getBuffer","result","min","slice","len","length","Infinity","max","i","j","v","ArrayBuffer","isView","buffer","_normalizeValue","normalized","_normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","byteOffset","requiredBufferSize","byteLength","reallocate","setAccessor","subData","data","startOffset","endOffset","startIndex","endIndex","subarray","copy","oldValue","allocate","ArrayType","illegalArrayType","Error","constructor","name","warn","map","x","out","start","value1","value2"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    'vertexOffset' in shaderAttributeOptions\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport default class DataColumn {\n  /* eslint-disable max-statements */\n  constructor(gl, opts) {\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n\n    let bufferType = logicalType;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else if (!bufferType) {\n      bufferType = GL.FLOAT;\n    }\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n\n    this.setData(opts);\n  }\n  /* eslint-enable max-statements */\n\n  get buffer() {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      });\n    }\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  get numInstances() {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n) {\n    this.state.numInstances = n;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  // Returns [min: Array(size), max: Array(size)]\n  /* eslint-disable max-depth */\n  getBounds() {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n    let result = null;\n    if (this.state.constant) {\n      const min = this.value.slice();\n      result = [min, min];\n    } else {\n      const {value, numInstances, size} = this;\n      const len = numInstances * size;\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n        for (let i = 0; i < len; ) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n        result = [min, max];\n      }\n    }\n    this.state.bounds = result;\n    return result;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(opts) {\n    const {state} = this;\n    if (ArrayBuffer.isView(opts)) {\n      opts = {value: opts};\n    } else if (opts instanceof Buffer) {\n      opts = {buffer: opts};\n    }\n\n    const accessor = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n    state.bounds = null; // clear cached bounds\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this._normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(opts = {}) {\n    this.state.bounds = null; // clear cached bounds\n\n    const {value} = this;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate({numInstances, copy = false}) {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = this.defaultType;\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  _normalizeConstant(value) {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out, start) {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"],"file":"data-column.js"}