{"version":3,"sources":["../../../../src/lib/attribute/shader-attribute.js"],"names":["ShaderAttribute","dataColumn","opts","source","value","buffer","getBuffer","accessor","getAccessor","size","constantValue","length","Float32Array","index","elementOffset","i"],"mappings":";;;;;;;;;;;;;;;;;;;IAGqBA,e;AACnB,2BAAYC,UAAZ,EAAwBC,IAAxB,EAA8B;AAAA;AAE5B,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcF,UAAd;AACD;;;;SAED,eAAY;AACV,aAAO,KAAKE,MAAL,CAAYC,KAAnB;AACD;;;WAED,oBAAW;AACT,UAAMC,MAAM,GAAG,KAAKF,MAAL,CAAYG,SAAZ,EAAf;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,EAAjB;;AACA,UAAIH,MAAJ,EAAY;AACV,eAAO,CAACA,MAAD,EAASE,QAAT,CAAP;AACD;;AAED,UAAOH,KAAP,GAAgB,KAAKD,MAArB,CAAOC,KAAP;AACA,UAAOK,IAAP,GAAeF,QAAf,CAAOE,IAAP;AACA,UAAIC,aAAa,GAAGN,KAApB;;AAEA,UAAIA,KAAK,IAAIA,KAAK,CAACO,MAAN,KAAiBF,IAA9B,EAAoC;AAClCC,QAAAA,aAAa,GAAG,IAAIE,YAAJ,CAAiBH,IAAjB,CAAhB;AAEA,YAAMI,KAAK,GAAGN,QAAQ,CAACO,aAAT,IAA0B,CAAxC;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0B,EAAEM,CAA5B,EAA+B;AAC7BL,UAAAA,aAAa,CAACK,CAAD,CAAb,GAAmBX,KAAK,CAACS,KAAK,GAAGE,CAAT,CAAxB;AACD;AACF;;AAED,aAAOL,aAAP;AACD;;;WAED,uBAAc;AACZ,6CAEK,KAAKP,MAAL,CAAYK,WAAZ,EAFL,GAIK,KAAKN,IAJV;AAMD","sourcesContent":["/* eslint-disable complexity */\n\n/* This class creates a luma.gl-compatible \"view\" on top of a DataColumn instance */\nexport default class ShaderAttribute {\n  constructor(dataColumn, opts) {\n    // Options that cannot be changed later\n    this.opts = opts;\n    this.source = dataColumn;\n  }\n\n  get value() {\n    return this.source.value;\n  }\n\n  getValue() {\n    const buffer = this.source.getBuffer();\n    const accessor = this.getAccessor();\n    if (buffer) {\n      return [buffer, accessor];\n    }\n\n    const {value} = this.source;\n    const {size} = accessor;\n    let constantValue = value;\n\n    if (value && value.length !== size) {\n      constantValue = new Float32Array(size);\n      // initiate offset values\n      const index = accessor.elementOffset || 0; // element offset\n      for (let i = 0; i < size; ++i) {\n        constantValue[i] = value[index + i];\n      }\n    }\n\n    return constantValue;\n  }\n\n  getAccessor() {\n    return {\n      // source data accessor\n      ...this.source.getAccessor(),\n      // shader attribute overrides\n      ...this.opts\n    };\n  }\n}\n"],"file":"shader-attribute.js"}