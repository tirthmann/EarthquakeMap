{"version":3,"sources":["../../../src/lib/composite-layer.js"],"names":["TRACE_RENDER_LAYERS","CompositeLayer","getSubLayers","every","layer","isLoaded","internalState","subLayers","updateObject","setNeedsUpdate","info","object","isDataWrapped","__source","parent","id","index","context","data","length","DefaultLayerClass","overridingProps","props","_subLayerProps","type","row","sourceObject","sourceObjectIndex","accessor","objectInfo","target","x","i","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","overridingSublayerProps","overridingSublayerTriggers","updateTriggers","sublayerId","propTypes","constructor","_propTypes","subLayerPropTypes","key","propType","getSubLayerAccessor","Object","assign","all","extension","passThroughProps","getSubLayerProps","call","updateAutoHighlight","shouldUpdate","needsUpdate","renderLayers","Boolean","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  initializeState() {}\n\n  // Updates selected state members and marks the composite layer to need rerender\n  setState(updateObject) {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  // called to augment the info object that is bubbled up from a sublayer\n  // override Layer.getPickingInfo() because decoding / setting uniform do\n  // not apply to a composite layer.\n  // @return null to cancel event\n  getPickingInfo({info}) {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  renderLayers() {\n    return null;\n  }\n\n  /**\n   * Filters sub layers at draw time\n   * @param {Layer} context.layer - sub layer instance\n   * @param {Viewport} context.viewport - the viewport being rendered in\n   * @param {Boolean} context.isPicking - whether it is a picking pass\n   * @param {String} context.pass - the current pass\n   * @return {Boolean} true if the sub layer should be drawn\n   */\n  filterSubLayer(context) {\n    return true;\n  }\n\n  // Returns true if sub layer needs to be rendered\n  shouldRenderSubLayer(id, data) {\n    return data && data.length;\n  }\n\n  // Returns sub layer class for a specific sublayer\n  getSubLayerClass(id, DefaultLayerClass) {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps && overridingProps[id] && overridingProps[id].type) || DefaultLayerClass\n    );\n  }\n\n  // When casting user data into another format to pass to sublayers,\n  // add reference to the original object and object index\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  // Some composite layers cast user data into another format before passing to sublayers\n  // We need to unwrap them before calling the accessor so that they see the original data\n  // objects\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n        return accessor(x, i);\n      };\n    }\n    return accessor;\n  }\n\n  // Returns sub layer props for a specific sublayer\n  // eslint-disable-next-line complexity\n  getSubLayerProps(sublayerProps = {}) {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps = overridingProps && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  // Called by layer manager to render subLayers\n  _renderLayers() {\n    let {subLayers} = this.internalState;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      subLayers = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayers, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n\nCompositeLayer.layerName = 'CompositeLayer';\n"],"file":"composite-layer.js"}