{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["DeckPicker","gl","pickingFBO","pickLayersPass","PickLayersPass","layerFilter","lastPickedInfo","index","layerId","info","props","_pickable","delete","depthFBO","color","opts","_pickClosestObject","_pickVisibleObjects","x","y","layers","viewports","lastPickedLayerId","layer","id","lastPickedViewportId","viewport","find","l","v","coordinate","unproject","Framebuffer","isSupported","colorBufferFloat","attach","Texture2D","format","type","resize","width","canvas","height","pickableLayers","filter","isPickable","isComposite","length","views","radius","depth","mode","unproject3D","onViewportActive","effects","_getPickable","result","emptyInfo","_resizeBuffer","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","affectedLayers","Set","i","pickedResult","_drawAndSample","pass","redrawReason","pickInfo","z","pickedLayer","pickedResultPass2","pickedX","pickedY","pickZ","pickedColors","add","disablePickingIndex","pickedObjectIndex","values","push","pickedColor","restorePickingColors","get","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","isMaxObjects","Number","isFinite","size","picked","has","object","set","Array","from","render","decodePickingColor","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo, getEmptyPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    if (this.depthFBO) {\n      this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    }\n    return this.pickingFBO;\n  }\n\n  // picking can only handle up to 255 layers. Drop non-pickable/invisible layers from the list.\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      const pickedResult =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          effects,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        ...pickedResult,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          effects,\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      effects,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    effects,\n    pass,\n    redrawReason,\n    pickZ\n  }) {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    const {decodePickingColor} = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      effects,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"file":"deck-picker.js"}