{"version":3,"sources":["../../../src/lib/layer-state.ts"],"names":["LayerState","attributeManager","layer","needsRedraw","subLayers","usesPickingColorCache","component","propName","url","fetch","props","value","onDataLoad","error","raiseError","ComponentState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAMqBA,U;;;;;AAYnB,4BAA2F;AAAA;;AAAA,QAA9EC,gBAA8E,QAA9EA,gBAA8E;AAAA,QAA5DC,KAA4D,QAA5DA,KAA4D;AAAA;AACzF,8BAAMA,KAAN;AADyF;AAAA;AAAA;AAAA;AAEzF,UAAKD,gBAAL,GAAwBA,gBAAxB;AACA,UAAKE,WAAL,GAAmB,IAAnB;AACA,UAAKC,SAAL,GAAiB,IAAjB;AACA,UAAKC,qBAAL,GAA6B,KAA7B;AALyF;AAM1F;;;;SAED,eAAmB;AACjB,aAAO,KAAKC,SAAZ;AACD,K;SAED,aAAUJ,KAAV,EAAwB;AACtB,WAAKI,SAAL,GAAiBJ,KAAjB;AACD;;;WAID,gBAAiBK,QAAjB,EAA2BC,GAA3B,EAAwC;AACtC,UAAMC,KAAK,GAAG,KAAKH,SAAL,CAAeI,KAAf,CAAqBD,KAAnC;;AACA,UAAIA,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACD,GAAD,EAAM;AAACD,UAAAA,QAAQ,EAARA,QAAD;AAAWL,UAAAA,KAAK,EAAE,KAAKA;AAAvB,SAAN,CAAZ;AACD;;AACD,gHAAoBK,QAApB,EAA8BC,GAA9B;AACD;;;WAED,oBAAqBD,QAArB,EAAwCI,KAAxC,EAAoD;AAClD,UAAMC,UAAU,GAAG,KAAKN,SAAL,CAAeI,KAAf,CAAqBE,UAAxC;;AACA,UAAIL,QAAQ,KAAK,MAAb,IAAuBK,UAA3B,EAAuC;AACrCA,QAAAA,UAAU,CAACD,KAAD,EAAQ;AAACJ,UAAAA,QAAQ,EAARA,QAAD;AAAWL,UAAAA,KAAK,EAAE,KAAKA;AAAvB,SAAR,CAAV;AACD;AACF;;;WAED,kBAAmBK,QAAnB,EAAsCM,KAAtC,EAAoD;AAClD,WAAKX,KAAL,CAAWY,UAAX,CAAsBD,KAAtB,oBAAwCN,QAAxC,iBAAuD,KAAKL,KAA5D;AACD;;;EA/C2Da,uB","sourcesContent":["import ComponentState from '../lifecycle/component-state';\n\nimport type Layer from './layer';\nimport type AttributeManager from './attribute/attribute-manager';\nimport {LayerProps} from './layer-props';\n\nexport default class LayerState<T extends LayerProps> extends ComponentState<T> {\n  attributeManager: AttributeManager;\n  needsRedraw: boolean;\n  /**\n   * Sublayers rendered in a previous cycle\n   */\n  subLayers: any;\n  /**\n   * If the layer is using the shared instancedPickingColors buffer\n   */\n  usesPickingColorCache: boolean;\n\n  constructor({attributeManager, layer}: {attributeManager: AttributeManager; layer: Layer}) {\n    super(layer);\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer(): Layer {\n    return this.component as Layer;\n  }\n\n  set layer(layer: Layer) {\n    this.component = layer;\n  }\n\n  /* Override base Component methods with Layer-specific handling */\n\n  protected _fetch(propName, url: string) {\n    const fetch = this.component.props.fetch;\n    if (fetch) {\n      return fetch(url, {propName, layer: this.layer});\n    }\n    return super._fetch(propName, url);\n  }\n\n  protected _onResolve(propName: keyof T, value: any) {\n    const onDataLoad = this.component.props.onDataLoad;\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {propName, layer: this.layer});\n    }\n  }\n\n  protected _onError(propName: keyof T, error: Error) {\n    this.layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n  }\n}\n"],"file":"layer-state.js"}