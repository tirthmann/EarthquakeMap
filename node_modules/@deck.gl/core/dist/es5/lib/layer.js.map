{"version":3,"sources":["../../../src/lib/layer.js"],"names":["TRACE_CHANGE_FLAG","TRACE_INITIALIZE","TRACE_UPDATE","TRACE_FINALIZE","TRACE_MATCHED","MAX_PICKING_COLOR_CACHE_SIZE","EMPTY_ARRAY","Object","freeze","areViewportsEqual","oldViewport","viewport","equals","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","compare","optional","_dataDiff","__diff","dataTransform","onDataLoad","onError","fetch","url","propName","layer","loaders","loadOptions","signal","resourceManager","context","getLoadOptions","props","inResourceManager","contains","add","resourceId","persistent","subscribe","onChange","internalState","reloadAsyncProp","consumerId","id","requestId","updateTriggers","visible","pickable","opacity","min","max","operation","OPERATION","DRAW","onHover","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","DEFAULT","coordinateOrigin","modelMatrix","wrapLongitude","positionFormat","colorFormat","parameters","transitions","extensions","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","error","message","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","needsRedraw","layerManager","setNeedsUpdate","String","needsUpdate","opts","clearRedrawFlags","_getNeedsRedraw","hasUniformTransition","shouldUpdateState","_getUpdateParams","uniformTransitions","active","isAsyncPropLoading","models","model","attributeManager","xyz","worldPosition","pixelProjectionMatrix","x","y","z","length","xy","unproject","params","LNGLAT","CARTESIAN","info","pickingEvent","i","target","color","Uint8Array","i1","i2","i3","index","Error","shaders","extension","getShaders","call","getAttributeManager","attributes","positions","instancePositions","getBounds","oldProps","changeFlags","propsOrDataChanged","dataChanged","Array","isArray","dataRange","invalidateAll","neededPickingBuffer","Number","isInteger","needPickingBuffer","pickingColors","instancePickingColors","pickingColorsAttribute","constant","invalidate","getModels","delete","finalize","unsubscribe","clear","draw","mode","object","viewportChanged","isComposite","_update","diffReason","changedAttributes","_setModelAttributes","numInstances","getNumInstances","startIndices","getStartIndices","update","buffers","ignoreUnknownAttributes","getChangedAttributes","clearChangedFlags","updateAttributes","updateTransition","propsInTransition","create","key","defineProperty","attribute","cacheSize","Math","floor","usesPickingColorCache","log","warn","typedArrayManager","allocate","size","copy","maxCount","newCacheSize","pickingColor","encodePickingColor","subarray","excludeAttributes","userData","shaderAttributes","getShaderAttributes","setAttributes","objectIndex","_disablePickingIndex","colors","start","getVertexOffset","end","buffer","subData","offset","updateSubBuffer","startOffset","undefined","_initState","initializeState","propsChanged","extensionsChanged","_updateState","stateNeedsUpdate","currentProps","currentViewport","_updateUniformTransition","updateParams","oldModels","gl","updateState","modelChanged","_updateModules","_renderLayers","_updateAttributes","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","uniforms","_updateAttributeTransition","pow","setModuleParameters","offsets","polygonOffset","flags","flagChanged","concat","updateTriggersChanged","somethingChanged","newProps","invalidateAttribute","transitionsChanged","updateModuleSettings","_updateAutoHighlight","pickingModuleParameters","pickingSelectedColor","picked","pickingHighlightColor","forceUpdate","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","AttributeManager","stats","timeline","isFinite","_getAttributeManager","addInstanced","noAlloc","calculateInstancePickingColors","LayerState","get","deprecated","UniformTransitionManager","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer","diffProps","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\nimport {COORDINATE_SYSTEM, OPERATION} from './constants';\nimport AttributeManager from './attribute/attribute-manager';\nimport UniformTransitionManager from './uniform-transition-manager';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport GL from '@luma.gl/constants';\nimport {withParameters, setParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport memoize from '../utils/memoize';\nimport {mergeShaders} from '../utils/shader';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\nimport typedArrayManager from '../utils/typed-array-manager';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from '@math.gl/web-mercator';\n\nimport {load} from '@loaders.gl/core';\n\nconst TRACE_CHANGE_FLAG = 'layer.changeFlag';\nconst TRACE_INITIALIZE = 'layer.initialize';\nconst TRACE_UPDATE = 'layer.update';\nconst TRACE_FINALIZE = 'layer.finalize';\nconst TRACE_MATCHED = 'layer.matched';\n\nconst MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\n// Only compare the same two viewports once\nconst areViewportsEqual = memoize(({oldViewport, viewport}) => {\n  return oldViewport.equals(viewport);\n});\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: {type: 'function', value: null, compare: false, optional: true},\n  _dataDiff: {type: 'function', value: data => data && data.__diff, compare: false, optional: true},\n  dataTransform: {type: 'function', value: null, compare: false, optional: true},\n  onDataLoad: {type: 'function', value: null, compare: false, optional: true},\n  onError: {type: 'function', value: null, compare: false, optional: true},\n  fetch: {\n    type: 'function',\n    value: (url, {propName, layer, loaders, loadOptions, signal}) => {\n      const {resourceManager} = layer.context;\n      loadOptions = loadOptions || layer.getLoadOptions();\n      loaders = loaders || layer.props.loaders;\n      if (signal) {\n        loadOptions = {\n          ...loadOptions,\n          fetch: {\n            ...loadOptions?.fetch,\n            signal\n          }\n        };\n      }\n\n      let inResourceManager = resourceManager.contains(url);\n\n      if (!inResourceManager && !loadOptions) {\n        // If there is no layer-specific load options, then attempt to cache this resource in the data manager\n        resourceManager.add({resourceId: url, data: load(url, loaders), persistent: false});\n        inResourceManager = true;\n      }\n      if (inResourceManager) {\n        return resourceManager.subscribe({\n          resourceId: url,\n          onChange: data => layer.internalState.reloadAsyncProp(propName, data),\n          consumerId: layer.id,\n          requestId: propName\n        });\n      }\n\n      return load(url, loaders, loadOptions);\n    },\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 1},\n  operation: OPERATION.DRAW,\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n  positionFormat: 'XYZ',\n  colorFormat: 'RGBA',\n\n  parameters: {},\n  transitions: null,\n  extensions: [],\n  loaders: {type: 'array', value: [], optional: true, compare: true},\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'accessor', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  raiseError(error, message) {\n    if (message) {\n      error.message = `${message}: ${error.message}`;\n    }\n    if (!this.props.onError?.(error)) {\n      this.context?.onError?.(error, this);\n    }\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  setNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n    this.internalState.needsUpdate = true;\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return (\n      this.internalState.needsUpdate ||\n      this.hasUniformTransition() ||\n      this.shouldUpdateState(this._getUpdateParams())\n    );\n    // End lifecycle method\n  }\n\n  hasUniformTransition() {\n    return this.internalState.uniformTransitions.active;\n  }\n\n  get isLoaded() {\n    return this.internalState && !this.internalState.isAsyncPropLoading();\n  }\n\n  get wrapLongitude() {\n    return this.props.wrapLongitude;\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Returns the default parse options for async props\n  getLoadOptions() {\n    return this.props.loadOptions;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz, params) {\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem,\n      ...params\n    });\n  }\n\n  use64bitPositions() {\n    const {coordinateSystem} = this.props;\n    return (\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n    );\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  getShaders(shaders) {\n    for (const extension of this.props.extensions) {\n      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));\n    }\n    return shaders;\n  }\n\n  // Default implementation\n  // Sublayers chould override this method to provide an accurate calculation of the bounds\n  getBounds() {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) return null;\n    const {positions, instancePositions} = attributeManager.attributes;\n    return (positions || instancePositions)?.getBounds();\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  /* eslint-disable-next-line complexity */\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      const {dataChanged} = changeFlags;\n      if (Array.isArray(dataChanged)) {\n        // is partial update\n        for (const dataRange of dataChanged) {\n          attributeManager.invalidateAll(dataRange);\n        }\n      } else {\n        attributeManager.invalidateAll();\n      }\n    }\n\n    const neededPickingBuffer =\n      Number.isInteger(oldProps.highlightedObjectIndex) || oldProps.pickable;\n    const needPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable;\n    if (neededPickingBuffer !== needPickingBuffer && attributeManager) {\n      const {pickingColors, instancePickingColors} = attributeManager.attributes;\n      const pickingColorsAttribute = pickingColors || instancePickingColors;\n      if (pickingColorsAttribute) {\n        if (needPickingBuffer && pickingColorsAttribute.constant) {\n          pickingColorsAttribute.constant = false;\n          attributeManager.invalidate(pickingColorsAttribute.id);\n        }\n        if (!pickingColorsAttribute.value && !needPickingBuffer) {\n          pickingColorsAttribute.constant = true;\n          pickingColorsAttribute.value = [0, 0, 0];\n        }\n      }\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n    this.context.resourceManager.unsubscribe({consumerId: this.id});\n    this.internalState.uniformTransitions.clear();\n    this.internalState.finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n  activateViewport(viewport) {\n    const oldViewport = this.internalState.viewport;\n    this.internalState.viewport = viewport;\n\n    if (!oldViewport || !areViewportsEqual({oldViewport, viewport})) {\n      this.setChangeFlags({viewportChanged: true});\n\n      if (this.isComposite) {\n        if (this.needsUpdate()) {\n          // Composite layers may add/remove sublayers on viewport change\n          // Because we cannot change the layers list during a draw cycle, we don't want to update sublayers right away\n          // This will not call update immediately, but mark the layerManager as needs update on the next frame\n          this.setNeedsUpdate();\n        }\n      } else {\n        this._update();\n      }\n    }\n  }\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      attributeManager.invalidateAll();\n    } else {\n      attributeManager.invalidate(name);\n    }\n  }\n\n  updateAttributes(changedAttributes) {\n    for (const model of this.getModels()) {\n      this._setModelAttributes(model, changedAttributes);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  _updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const startIndices = this.getStartIndices(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      startIndices,\n      props,\n      transitions: props.transitions,\n      buffers: props.data.attributes,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n    this.updateAttributes(changedAttributes);\n  }\n\n  // Update attribute transitions. This is called in drawLayer, no model updates required.\n  _updateAttributeTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition();\n    }\n  }\n\n  // Update uniform (prop) transitions. This is called in updateState, may result in model updates.\n  _updateUniformTransition() {\n    const {uniformTransitions} = this.internalState;\n    if (uniformTransitions.active) {\n      // clone props\n      const propsInTransition = uniformTransitions.update();\n      const props = Object.create(this.props);\n      for (const key in propsInTransition) {\n        Object.defineProperty(props, key, {value: propsInTransition[key]});\n      }\n      return props;\n    }\n    return this.props;\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    if (attribute.constant) {\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = Math.floor(pickingColorCache.length / 3);\n\n    // Record when using the picking buffer cache, so that layers can always point at the most recently allocated cache\n    this.internalState.usesPickingColorCache = true;\n\n    if (cacheSize < numInstances) {\n      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {\n        log.warn(\n          'Layer has too many data objects. Picking might not be able to distinguish all objects.'\n        )();\n      }\n\n      pickingColorCache = typedArrayManager.allocate(pickingColorCache, numInstances, {\n        size: 3,\n        copy: true,\n        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)\n      });\n\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newCacheSize = Math.floor(pickingColorCache.length / 3);\n      const pickingColor = [];\n      for (let i = cacheSize; i < newCacheSize; i++) {\n        this.encodePickingColor(i, pickingColor);\n        pickingColorCache[i * 3 + 0] = pickingColor[0];\n        pickingColorCache[i * 3 + 1] = pickingColor[1];\n        pickingColorCache[i * 3 + 2] = pickingColor[2];\n      }\n    }\n\n    attribute.value = pickingColorCache.subarray(0, numInstances * 3);\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const attributeManager = this.getAttributeManager();\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    const shaderAttributes = attributeManager.getShaderAttributes(\n      changedAttributes,\n      excludeAttributes\n    );\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the picking color at the specified index to null picking color. Used for multi-depth picking.\n  // This method may be overriden by layer implementations\n  disablePickingIndex(objectIndex) {\n    this._disablePickingIndex(objectIndex);\n  }\n\n  _disablePickingIndex(objectIndex) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    const start = colors.getVertexOffset(objectIndex);\n    const end = colors.getVertexOffset(objectIndex + 1);\n\n    // Fill the sub buffer with 0s\n    colors.buffer.subData({\n      data: new Uint8Array(end - start),\n      offset: start // 1 byte per element\n    });\n  }\n\n  restorePickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n    // The picking color cache may have been freed and then reallocated. This ensures we read from the currently allocated cache.\n    if (\n      this.internalState.usesPickingColorCache &&\n      colors.value.buffer !== pickingColorCache.buffer\n    ) {\n      colors.value = pickingColorCache.subarray(0, colors.value.length);\n    }\n    colors.updateSubBuffer({startOffset: 0});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    return count(props.data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getStartIndices(props) {\n    props = props || this.props;\n\n    // First Check if startIndices is provided as an explicit value\n    if (props.startIndices !== undefined) {\n      return props.startIndices;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.startIndices) {\n      return this.state.startIndices;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    debug(TRACE_INITIALIZE, this);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // Initialize extensions\n    for (const extension of this.props.extensions) {\n      extension.initializeState.call(this, this.context, extension);\n    }\n    // End subclass lifecycle methods\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({\n      dataChanged: true,\n      propsChanged: true,\n      viewportChanged: true,\n      extensionsChanged: true\n    });\n\n    this._updateState();\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n    debug(TRACE_UPDATE, this, stateNeedsUpdate);\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const currentProps = this.props;\n    const currentViewport = this.context.viewport;\n    const propsInTransition = this._updateUniformTransition();\n    this.internalState.propsInTransition = propsInTransition;\n    // Overwrite this.context.viewport during update to use the last activated viewport on this layer\n    // In multi-view applications, a layer may only be drawn in one of the views\n    // Which would make the \"active\" viewport different from the shared context\n    this.context.viewport = this.internalState.viewport || currentViewport;\n    // Overwrite this.props during update to use in-transition prop values\n    this.props = propsInTransition;\n\n    try {\n      const updateParams = this._getUpdateParams();\n      const oldModels = this.getModels();\n\n      // Safely call subclass lifecycle methods\n      if (this.context.gl) {\n        this.updateState(updateParams);\n      } else {\n        try {\n          this.updateState(updateParams);\n        } catch (error) {\n          // ignore error if gl context is missing\n        }\n      }\n      // Execute extension updates\n      for (const extension of this.props.extensions) {\n        extension.updateState.call(this, updateParams, extension);\n      }\n\n      const modelChanged = this.getModels()[0] !== oldModels[0];\n      this._updateModules(updateParams, modelChanged);\n      // End subclass lifecycle methods\n\n      if (this.isComposite) {\n        // Render or update previously rendered sublayers\n        this._renderLayers(updateParams);\n      } else {\n        this.setNeedsRedraw();\n        // Add any subclass attributes\n        this._updateAttributes(this.props);\n\n        // Note: Automatic instance count update only works for single layers\n        if (this.state.model) {\n          this.state.model.setInstanceCount(this.getNumInstances());\n        }\n      }\n    } finally {\n      // Restore shared context\n      this.context.viewport = currentViewport;\n      this.props = currentProps;\n      this.clearChangeFlags();\n      this.internalState.needsUpdate = false;\n      this.internalState.resetOldProps();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    debug(TRACE_FINALIZE, this);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // Finalize extensions\n    for (const extension of this.props.extensions) {\n      extension.finalizeState.call(this, extension);\n    }\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    this._updateAttributeTransition();\n\n    const currentProps = this.props;\n    // Overwrite this.props during redraw to use in-transition prop values\n    // `internalState.propsInTransition` could be missing if `updateState` failed\n    this.props = this.internalState.propsInTransition || currentProps;\n\n    const {opacity} = this.props;\n    // apply gamma to opacity to make it visually \"linear\"\n    uniforms.opacity = Math.pow(opacity, 1 / 2.2);\n\n    try {\n      // TODO/ib - hack move to luma Model.draw\n      if (moduleParameters) {\n        this.setModuleParameters(moduleParameters);\n      }\n\n      // Apply polygon offset to avoid z-fighting\n      // TODO - move to draw-layers\n      const {getPolygonOffset} = this.props;\n      const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n\n      setParameters(this.context.gl, {polygonOffset: offsets});\n\n      // Call subclass lifecycle method\n      withParameters(this.context.gl, parameters, () => {\n        const opts = {moduleParameters, uniforms, parameters, context: this.context};\n\n        // extensions\n        for (const extension of this.props.extensions) {\n          extension.draw.call(this, opts, extension);\n        }\n\n        this.draw(opts);\n      });\n    } finally {\n      this.props = currentProps;\n    }\n\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    const {changeFlags} = this.internalState;\n\n    /* eslint-disable no-fallthrough, max-depth */\n    for (const key in flags) {\n      if (flags[key]) {\n        let flagChanged = false;\n        switch (key) {\n          case 'dataChanged':\n            // changeFlags.dataChanged may be `false`, a string (reason) or an array of ranges\n            if (Array.isArray(changeFlags[key])) {\n              changeFlags[key] = Array.isArray(flags[key])\n                ? changeFlags[key].concat(flags[key])\n                : flags[key];\n              flagChanged = true;\n            }\n\n          default:\n            if (!changeFlags[key]) {\n              changeFlags[key] = flags[key];\n              flagChanged = true;\n            }\n        }\n        if (flagChanged) {\n          debug(TRACE_CHANGE_FLAG, this, key, flags);\n        }\n      }\n    }\n    /* eslint-enable no-fallthrough, max-depth */\n\n    // Update composite flags\n    const propsOrDataChanged =\n      changeFlags.dataChanged ||\n      changeFlags.updateTriggersChanged ||\n      changeFlags.propsChanged ||\n      changeFlags.extensionsChanged;\n    changeFlags.propsOrDataChanged = propsOrDataChanged;\n    changeFlags.somethingChanged =\n      propsOrDataChanged || flags.viewportChanged || flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n      extensionsChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this.invalidateAttribute(key);\n        }\n      }\n    }\n\n    // trigger uniform transitions\n    if (changeFlags.transitionsChanged) {\n      for (const key in changeFlags.transitionsChanged) {\n        // prop changed and transition is enabled\n        this.internalState.uniformTransitions.add(\n          key,\n          oldProps[key],\n          newProps[key],\n          newProps.transitions[key]\n        );\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  updateAutoHighlight(info) {\n    if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {\n      this._updateAutoHighlight(info);\n    }\n  }\n\n  // May be overriden by classes\n  _updateAutoHighlight(info) {\n    const pickingModuleParameters = {\n      pickingSelectedColor: info.picked ? info.color : null\n    };\n    const {highlightColor} = this.props;\n    if (info.picked && typeof highlightColor === 'function') {\n      pickingModuleParameters.pickingHighlightColor = highlightColor(info);\n    }\n    this.setModuleParameters(pickingModuleParameters);\n    // setModuleParameters does not trigger redraw\n    this.setNeedsRedraw();\n  }\n\n  // PRIVATE METHODS\n  _updateModules({props, oldProps}, forceUpdate) {\n    // Picking module parameters\n    const {autoHighlight, highlightedObjectIndex, highlightColor} = props;\n    if (\n      forceUpdate ||\n      oldProps.autoHighlight !== autoHighlight ||\n      oldProps.highlightedObjectIndex !== highlightedObjectIndex ||\n      oldProps.highlightColor !== highlightColor\n    ) {\n      const parameters = {};\n      if (!autoHighlight) {\n        parameters.pickingSelectedColor = null;\n      }\n      if (Array.isArray(highlightColor)) {\n        parameters.pickingHighlightColor = highlightColor;\n      }\n\n      // highlightedObjectIndex will overwrite any settings from auto highlighting.\n      if (Number.isInteger(highlightedObjectIndex)) {\n        parameters.pickingSelectedColor =\n          highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;\n      }\n\n      this.setModuleParameters(parameters);\n    }\n  }\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats,\n      timeline: this.context.timeline\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state); // finalized layer cannot be reused\n    assert(isFinite(this.props.coordinateSystem)); // invalid coordinateSystem\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n    this.clearChangeFlags(); // populate this.internalState.changeFlags\n\n    this.state = {};\n    // for backwards compatibility with older layers\n    // TODO - remove in next release\n    /* eslint-disable accessor-pairs */\n    Object.defineProperty(this.state, 'attributeManager', {\n      get: () => {\n        log.deprecated('layer.state.attributeManager', 'layer.getAttributeManager()');\n        return attributeManager;\n      }\n    });\n    /* eslint-enable accessor-pairs */\n\n    this.internalState.layer = this;\n    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    debug(TRACE_MATCHED, this, this === oldLayer);\n\n    const {state, internalState} = oldLayer;\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.layer = this;\n\n    // Move state\n    this.state = state;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setNeedsUpdate();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}