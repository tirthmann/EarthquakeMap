{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","getMemoizedViewportUniforms","calculateViewportUniforms","getOffsetOrigin","viewport","coordinateSystem","coordinateOrigin","length","shaderCoordinateOrigin","geospatialOrigin","offsetMode","COORDINATE_SYSTEM","LNGLAT_OFFSETS","METER_OFFSETS","isGeospatial","Math","fround","longitude","latitude","projectionMode","PROJECTION_MODE","WEB_MERCATOR","LNGLAT","CARTESIAN","WEB_MERCATOR_AUTO_OFFSET","center","unprojectPosition","IDENTITY","position","map","GLOBE","calculateMatrixAndOffset","viewMatrixUncentered","projectionMatrix","viewMatrix","viewProjectionMatrix","projectionCenter","originCommon","cameraPosCommon","cameraPosition","projectPosition","vec4","transformMat4","mat4","multiply","getUniformsFromViewport","devicePixelRatio","modelMatrix","DEFAULT","autoWrapLongitude","uniforms","project_uWrapLongitude","project_uModelMatrix","distanceScales","getDistanceScales","viewportSize","width","height","focalDistance","project_uCoordinateSystem","project_uProjectionMode","project_uCoordinateOrigin","project_uCommonOrigin","slice","project_uCenter","project_uPseudoMeters","Boolean","_pseudoMeters","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","project_uCommonUnitsPerMeter","unitsPerMeter","project_uCommonUnitsPerWorldUnit","project_uCommonUnitsPerWorldUnit2","project_uScale","scale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin","unitsPerMeter2","unitsPerDegree","unitsPerDegree2"],"mappings":";;;;;;;;;;;;AAqBA;;AACA;;AAEA;;AAEA;;;;;;AAGA,IAAMA,WAAW,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAApB;AAEA,IAAMC,sBAAsB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAA/B;AACA,IAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAxB;AACA,IAAMC,wBAAwB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjC;AACA,IAAMC,yBAAyB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlC;AAEA,IAAMC,2BAA2B,GAAG,sBAAQC,yBAAR,CAApC;;AAEO,SAASC,eAAT,CACLC,QADK,EAELC,gBAFK,EAIL;AAAA,MADAC,gBACA,uEADmBN,yBACnB;;AACA,MAAIM,gBAAgB,CAACC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/BD,IAAAA,gBAAgB,GAAG,CAACA,gBAAgB,CAAC,CAAD,CAAjB,EAAsBA,gBAAgB,CAAC,CAAD,CAAtC,EAA2C,CAA3C,CAAnB;AACD;;AAED,MAAIE,sBAAsB,GAAGF,gBAA7B;AACA,MAAIG,gBAAJ;AACA,MAAIC,UAAU,GAAG,IAAjB;;AAEA,MACEL,gBAAgB,KAAKM,6BAAkBC,cAAvC,IACAP,gBAAgB,KAAKM,6BAAkBE,aAFzC,EAGE;AACAJ,IAAAA,gBAAgB,GAAGH,gBAAnB;AACD,GALD,MAKO;AACLG,IAAAA,gBAAgB,GAAGL,QAAQ,CAACU,YAAT,GACf,CAACC,IAAI,CAACC,MAAL,CAAYZ,QAAQ,CAACa,SAArB,CAAD,EAAkCF,IAAI,CAACC,MAAL,CAAYZ,QAAQ,CAACc,QAArB,CAAlC,EAAkE,CAAlE,CADe,GAEf,IAFJ;AAGD;;AAED,UAAQd,QAAQ,CAACe,cAAjB;AACE,SAAKC,2BAAgBC,YAArB;AACE,UACEhB,gBAAgB,KAAKM,6BAAkBW,MAAvC,IACAjB,gBAAgB,KAAKM,6BAAkBY,SAFzC,EAGE;AACAd,QAAAA,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACAC,QAAAA,UAAU,GAAG,KAAb;AACD;;AACD;;AAEF,SAAKU,2BAAgBI,wBAArB;AACE,UAAInB,gBAAgB,KAAKM,6BAAkBW,MAA3C,EAAmD;AAEjDd,QAAAA,sBAAsB,GAAGC,gBAAzB;AACD,OAHD,MAGO,IAAIJ,gBAAgB,KAAKM,6BAAkBY,SAA3C,EAAsD;AAE3Df,QAAAA,sBAAsB,GAAG,CACvBO,IAAI,CAACC,MAAL,CAAYZ,QAAQ,CAACqB,MAAT,CAAgB,CAAhB,CAAZ,CADuB,EAEvBV,IAAI,CAACC,MAAL,CAAYZ,QAAQ,CAACqB,MAAT,CAAgB,CAAhB,CAAZ,CAFuB,EAGvB,CAHuB,CAAzB;AAMAhB,QAAAA,gBAAgB,GAAGL,QAAQ,CAACsB,iBAAT,CAA2BlB,sBAA3B,CAAnB;AACAA,QAAAA,sBAAsB,CAAC,CAAD,CAAtB,IAA6BF,gBAAgB,CAAC,CAAD,CAA7C;AACAE,QAAAA,sBAAsB,CAAC,CAAD,CAAtB,IAA6BF,gBAAgB,CAAC,CAAD,CAA7C;AACAE,QAAAA,sBAAsB,CAAC,CAAD,CAAtB,IAA6BF,gBAAgB,CAAC,CAAD,CAA7C;AACD;;AACD;;AAEF,SAAKc,2BAAgBO,QAArB;AACEnB,MAAAA,sBAAsB,GAAGJ,QAAQ,CAACwB,QAAT,CAAkBC,GAAlB,CAAsBd,IAAI,CAACC,MAA3B,CAAzB;AACAR,MAAAA,sBAAsB,CAAC,CAAD,CAAtB,GAA4BA,sBAAsB,CAAC,CAAD,CAAtB,IAA6B,CAAzD;AACA;;AAEF,SAAKY,2BAAgBU,KAArB;AACEpB,MAAAA,UAAU,GAAG,KAAb;AACAD,MAAAA,gBAAgB,GAAG,IAAnB;AACA;;AAEF;AAEEC,MAAAA,UAAU,GAAG,KAAb;AA1CJ;;AA6CA,SAAO;AAACD,IAAAA,gBAAgB,EAAhBA,gBAAD;AAAmBD,IAAAA,sBAAsB,EAAtBA,sBAAnB;AAA2CE,IAAAA,UAAU,EAAVA;AAA3C,GAAP;AACD;;AAID,SAASqB,wBAAT,CAAkC3B,QAAlC,EAA4CC,gBAA5C,EAA8DC,gBAA9D,EAAgF;AAC9E,MAAO0B,oBAAP,GAAiD5B,QAAjD,CAAO4B,oBAAP;AAAA,MAA6BC,gBAA7B,GAAiD7B,QAAjD,CAA6B6B,gBAA7B;AACA,MAAKC,UAAL,GAAyC9B,QAAzC,CAAK8B,UAAL;AAAA,MAAiBC,oBAAjB,GAAyC/B,QAAzC,CAAiB+B,oBAAjB;AAEA,MAAIC,gBAAgB,GAAGxC,WAAvB;AACA,MAAIyC,YAAY,GAAGzC,WAAnB;AACA,MAAI0C,eAAe,GAAGlC,QAAQ,CAACmC,cAA/B;;AACA,yBAA+DpC,eAAe,CAC5EC,QAD4E,EAE5EC,gBAF4E,EAG5EC,gBAH4E,CAA9E;AAAA,MAAOG,gBAAP,oBAAOA,gBAAP;AAAA,MAAyBD,sBAAzB,oBAAyBA,sBAAzB;AAAA,MAAiDE,UAAjD,oBAAiDA,UAAjD;;AAMA,MAAIA,UAAJ,EAAgB;AAId2B,IAAAA,YAAY,GAAGjC,QAAQ,CAACoC,eAAT,CAAyB/B,gBAAgB,IAAID,sBAA7C,CAAf;AAEA8B,IAAAA,eAAe,GAAG,CAChBA,eAAe,CAAC,CAAD,CAAf,GAAqBD,YAAY,CAAC,CAAD,CADjB,EAEhBC,eAAe,CAAC,CAAD,CAAf,GAAqBD,YAAY,CAAC,CAAD,CAFjB,EAGhBC,eAAe,CAAC,CAAD,CAAf,GAAqBD,YAAY,CAAC,CAAD,CAHjB,CAAlB;AAMAA,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAlB;AAIAD,IAAAA,gBAAgB,GAAGK,IAAI,CAACC,aAAL,CAAmB,EAAnB,EAAuBL,YAAvB,EAAqCF,oBAArC,CAAnB;AAGAD,IAAAA,UAAU,GAAGF,oBAAoB,IAAIE,UAArC;AAKAC,IAAAA,oBAAoB,GAAGQ,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBX,gBAAlB,EAAoCC,UAApC,CAAvB;AACAC,IAAAA,oBAAoB,GAAGQ,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBT,oBAAlB,EAAwCtC,sBAAxC,CAAvB;AACD;;AAED,SAAO;AACLqC,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,oBAAoB,EAApBA,oBAFK;AAGLC,IAAAA,gBAAgB,EAAhBA,gBAHK;AAILC,IAAAA,YAAY,EAAZA,YAJK;AAKLC,IAAAA,eAAe,EAAfA,eALK;AAML9B,IAAAA,sBAAsB,EAAtBA,sBANK;AAOLC,IAAAA,gBAAgB,EAAhBA;AAPK,GAAP;AASD;;AAWM,SAASoC,uBAAT,GAQC;AAAA,iFAAJ,EAAI;AAAA,MAPNzC,QAOM,QAPNA,QAOM;AAAA,mCANN0C,gBAMM;AAAA,MANNA,gBAMM,sCANa,CAMb;AAAA,8BALNC,WAKM;AAAA,MALNA,WAKM,iCALQ,IAKR;AAAA,mCAHN1C,gBAGM;AAAA,MAHNA,gBAGM,sCAHaM,6BAAkBqC,OAG/B;AAAA,MAFN1C,gBAEM,QAFNA,gBAEM;AAAA,mCADN2C,iBACM;AAAA,MADNA,iBACM,sCADc,KACd;;AACN,MAAI5C,gBAAgB,KAAKM,6BAAkBqC,OAA3C,EAAoD;AAClD3C,IAAAA,gBAAgB,GAAGD,QAAQ,CAACU,YAAT,GACfH,6BAAkBW,MADH,GAEfX,6BAAkBY,SAFtB;AAGD;;AAED,MAAM2B,QAAQ,GAAGjD,2BAA2B,CAAC;AAC3CG,IAAAA,QAAQ,EAARA,QAD2C;AAE3C0C,IAAAA,gBAAgB,EAAhBA,gBAF2C;AAG3CzC,IAAAA,gBAAgB,EAAhBA,gBAH2C;AAI3CC,IAAAA,gBAAgB,EAAhBA;AAJ2C,GAAD,CAA5C;AAOA4C,EAAAA,QAAQ,CAACC,sBAAT,GAAkCF,iBAAlC;AACAC,EAAAA,QAAQ,CAACE,oBAAT,GAAgCL,WAAW,IAAIjD,eAA/C;AAEA,SAAOoD,QAAP;AACD;;AAED,SAAShD,yBAAT,QAKG;AAAA,MAJDE,QAIC,SAJDA,QAIC;AAAA,MAHD0C,gBAGC,SAHDA,gBAGC;AAAA,MAFDzC,gBAEC,SAFDA,gBAEC;AAAA,MADDC,gBACC,SADDA,gBACC;;AACD,8BAOIyB,wBAAwB,CAAC3B,QAAD,EAAWC,gBAAX,EAA6BC,gBAA7B,CAP5B;AAAA,MACE8B,gBADF,yBACEA,gBADF;AAAA,MAEED,oBAFF,yBAEEA,oBAFF;AAAA,MAGEE,YAHF,yBAGEA,YAHF;AAAA,MAIEC,eAJF,yBAIEA,eAJF;AAAA,MAKE9B,sBALF,yBAKEA,sBALF;AAAA,MAMEC,gBANF,yBAMEA,gBANF;;AAUA,MAAM4C,cAAc,GAAGjD,QAAQ,CAACkD,iBAAT,EAAvB;AAEA,MAAMC,YAAY,GAAG,CAACnD,QAAQ,CAACoD,KAAT,GAAiBV,gBAAlB,EAAoC1C,QAAQ,CAACqD,MAAT,GAAkBX,gBAAtD,CAArB;AAMA,MAAMY,aAAa,GACjBjB,IAAI,CAACC,aAAL,CAAmB,EAAnB,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAACtC,QAAQ,CAACsD,aAAjB,EAAgC,CAAhC,CAAvB,EAA2DtD,QAAQ,CAAC6B,gBAApE,EAAsF,CAAtF,KAA4F,CAD9F;AAGA,MAAMiB,QAAQ,GAAG;AAEfS,IAAAA,yBAAyB,EAAEtD,gBAFZ;AAGfuD,IAAAA,uBAAuB,EAAExD,QAAQ,CAACe,cAHnB;AAIf0C,IAAAA,yBAAyB,EAAErD,sBAJZ;AAKfsD,IAAAA,qBAAqB,EAAEzB,YAAY,CAAC0B,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CALR;AAMfC,IAAAA,eAAe,EAAE5B,gBANF;AAUf6B,IAAAA,qBAAqB,EAAEC,OAAO,CAAC9D,QAAQ,CAAC+D,aAAV,CAVf;AAafC,IAAAA,qBAAqB,EAAEb,YAbR;AAcfc,IAAAA,yBAAyB,EAAEvB,gBAdZ;AAgBfwB,IAAAA,sBAAsB,EAAEZ,aAhBT;AAiBfa,IAAAA,4BAA4B,EAAElB,cAAc,CAACmB,aAjB9B;AAkBfC,IAAAA,gCAAgC,EAAEpB,cAAc,CAACmB,aAlBlC;AAmBfE,IAAAA,iCAAiC,EAAE3E,wBAnBpB;AAoBf4E,IAAAA,cAAc,EAAEvE,QAAQ,CAACwE,KApBV;AAsBfC,IAAAA,6BAA6B,EAAE1C,oBAtBhB;AAyBf2C,IAAAA,uBAAuB,EAAExC;AAzBV,GAAjB;;AA4BA,MAAI7B,gBAAJ,EAAsB;AACpB,QAAMsE,sBAAsB,GAAG3E,QAAQ,CAACkD,iBAAT,CAA2B7C,gBAA3B,CAA/B;;AACA,YAAQJ,gBAAR;AACE,WAAKM,6BAAkBE,aAAvB;AACEqC,QAAAA,QAAQ,CAACuB,gCAAT,GAA4CM,sBAAsB,CAACP,aAAnE;AACAtB,QAAAA,QAAQ,CAACwB,iCAAT,GAA6CK,sBAAsB,CAACC,cAApE;AACA;;AAEF,WAAKrE,6BAAkBW,MAAvB;AACA,WAAKX,6BAAkBC,cAAvB;AACE,YAAI,CAACR,QAAQ,CAAC+D,aAAd,EAA6B;AAC3BjB,UAAAA,QAAQ,CAACqB,4BAAT,GAAwCQ,sBAAsB,CAACP,aAA/D;AACD;;AACDtB,QAAAA,QAAQ,CAACuB,gCAAT,GAA4CM,sBAAsB,CAACE,cAAnE;AACA/B,QAAAA,QAAQ,CAACwB,iCAAT,GAA6CK,sBAAsB,CAACG,eAApE;AACA;;AAGF,WAAKvE,6BAAkBY,SAAvB;AACE2B,QAAAA,QAAQ,CAACuB,gCAAT,GAA4C,CAAC,CAAD,EAAI,CAAJ,EAAOM,sBAAsB,CAACP,aAAvB,CAAqC,CAArC,CAAP,CAA5C;AACAtB,QAAAA,QAAQ,CAACwB,iCAAT,GAA6C,CAC3C,CAD2C,EAE3C,CAF2C,EAG3CK,sBAAsB,CAACC,cAAvB,CAAsC,CAAtC,CAH2C,CAA7C;AAKA;;AAEF;AACE;AA1BJ;AA4BD;;AAED,SAAO9B,QAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable complexity */\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\n\nimport {COORDINATE_SYSTEM, PROJECTION_MODE} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\nexport function getOffsetOrigin(\n  viewport,\n  coordinateSystem,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN\n) {\n  if (coordinateOrigin.length < 3) {\n    coordinateOrigin = [coordinateOrigin[0], coordinateOrigin[1], 0];\n  }\n\n  let shaderCoordinateOrigin = coordinateOrigin;\n  let geospatialOrigin;\n  let offsetMode = true;\n\n  if (\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS\n  ) {\n    geospatialOrigin = coordinateOrigin;\n  } else {\n    geospatialOrigin = viewport.isGeospatial\n      ? [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]\n      : null;\n  }\n\n  switch (viewport.projectionMode) {\n    case PROJECTION_MODE.WEB_MERCATOR:\n      if (\n        coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n        coordinateSystem === COORDINATE_SYSTEM.CARTESIAN\n      ) {\n        geospatialOrigin = [0, 0, 0];\n        offsetMode = false;\n      }\n      break;\n\n    case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:\n      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        // viewport center in world space\n        shaderCoordinateOrigin = geospatialOrigin;\n      } else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {\n        // viewport center in common space\n        shaderCoordinateOrigin = [\n          Math.fround(viewport.center[0]),\n          Math.fround(viewport.center[1]),\n          0\n        ];\n        // Geospatial origin (wgs84) must match shaderCoordinateOrigin (common)\n        geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);\n        shaderCoordinateOrigin[0] -= coordinateOrigin[0];\n        shaderCoordinateOrigin[1] -= coordinateOrigin[1];\n        shaderCoordinateOrigin[2] -= coordinateOrigin[2];\n      }\n      break;\n\n    case PROJECTION_MODE.IDENTITY:\n      shaderCoordinateOrigin = viewport.position.map(Math.fround);\n      shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n      break;\n\n    case PROJECTION_MODE.GLOBE:\n      offsetMode = false;\n      geospatialOrigin = null;\n      break;\n\n    default:\n      // Unknown projection mode\n      offsetMode = false;\n  }\n\n  return {geospatialOrigin, shaderCoordinateOrigin, offsetMode};\n}\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\nfunction calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {\n  const {viewMatrixUncentered, projectionMatrix} = viewport;\n  let {viewMatrix, viewProjectionMatrix} = viewport;\n\n  let projectionCenter = ZERO_VECTOR;\n  let originCommon = ZERO_VECTOR;\n  let cameraPosCommon = viewport.cameraPosition;\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  if (offsetMode) {\n    // Calculate transformed projectionCenter (using 64 bit precision JS)\n    // This is the key to offset mode precision\n    // (avoids doing this addition in 32 bit precision in GLSL)\n    originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n\n    cameraPosCommon = [\n      cameraPosCommon[0] - originCommon[0],\n      cameraPosCommon[1] - originCommon[1],\n      cameraPosCommon[2] - originCommon[2]\n    ];\n\n    originCommon[3] = 1;\n\n    // projectionCenter = new Matrix4(viewProjectionMatrix)\n    //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n    projectionCenter = vec4.transformMat4([], originCommon, viewProjectionMatrix);\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = viewMatrixUncentered || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n    //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    originCommon,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin,\n  autoWrapLongitude = false\n} = {}) {\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  const uniforms = getMemoizedViewportUniforms({\n    viewport,\n    devicePixelRatio,\n    coordinateSystem,\n    coordinateOrigin\n  });\n\n  uniforms.project_uWrapLongitude = autoWrapLongitude;\n  uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;\n\n  return uniforms;\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin\n}) {\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    originCommon,\n    cameraPosCommon,\n    shaderCoordinateOrigin,\n    geospatialOrigin\n  } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  // Distance at which screen pixels are projected.\n  // Used to scale sizes in clipspace to match screen pixels.\n  // When using Viewport class's default projection matrix, this yields 1 for orthographic\n  // and `viewport.focalDistance` for perspective views\n  const focalDistance =\n    vec4.transformMat4([], [0, 0, -viewport.focalDistance, 1], viewport.projectionMatrix)[3] || 1;\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: coordinateSystem,\n    project_uProjectionMode: viewport.projectionMode,\n    project_uCoordinateOrigin: shaderCoordinateOrigin,\n    project_uCommonOrigin: originCommon.slice(0, 3),\n    project_uCenter: projectionCenter,\n\n    // Backward compatibility\n    // TODO: remove in v9\n    project_uPseudoMeters: Boolean(viewport._pseudoMeters),\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    project_uFocalDistance: focalDistance,\n    project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPosCommon\n  };\n\n  if (geospatialOrigin) {\n    const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);\n    switch (coordinateSystem) {\n      case COORDINATE_SYSTEM.METER_OFFSETS:\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;\n        break;\n\n      case COORDINATE_SYSTEM.LNGLAT:\n      case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n        if (!viewport._pseudoMeters) {\n          uniforms.project_uCommonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;\n        }\n        uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;\n        uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;\n        break;\n\n      // a.k.a \"preprojected\" positions\n      case COORDINATE_SYSTEM.CARTESIAN:\n        uniforms.project_uCommonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];\n        uniforms.project_uCommonUnitsPerWorldUnit2 = [\n          0,\n          0,\n          distanceScalesAtOrigin.unitsPerMeter2[2]\n        ];\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return uniforms;\n}\n"],"file":"viewport-uniforms.js"}