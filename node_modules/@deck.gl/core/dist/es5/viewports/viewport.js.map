{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","DEFAULT_DISTANCE_SCALES","unitsPerMeter","metersPerUnit","Viewport","opts","id","x","y","width","height","constructor","displayName","_frustumPlanes","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","distanceScales","scale","isGeospatial","zoom","PROJECTION_MODE","WEB_MERCATOR","WEB_MERCATOR_AUTO_OFFSET","viewport","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","options","unprojectOption","topRight","bottomLeft","bottomRight","min","max","coordinateOrigin","longitude","latitude","highPrecision","near","Object","assign","viewProjectionMatrix","coords","pixel","cameraPosition","cameraDirection","cameraUp","orthographic","fovyRadians","aspect","focalDistance","far","Matrix4","fovy","perspective","position","modelMatrix","log2","pow","Vector3","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","commonPosition","add","_createProjectionMatrix","vpm","mat4","multiply","viewMatrixInverse","invert","viewportMatrix","log","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, getCameraPosition, getFrustumPlanes} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from '@math.gl/web-mercator';\n\nimport {PROJECTION_MODE} from '../lib/constants';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst DEFAULT_DISTANCE_SCALES = {\n  unitsPerMeter: [1, 1, 1],\n  metersPerUnit: [1, 1, 1]\n};\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this._frustumPlanes = {};\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n\n  get metersPerPixel() {\n    return this.distanceScales.metersPerUnit[2] / this.scale;\n  }\n\n  get projectionMode() {\n    if (this.isGeospatial) {\n      return this.zoom < 12\n        ? PROJECTION_MODE.WEB_MERCATOR\n        : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;\n    }\n    return PROJECTION_MODE.IDENTITY;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n    if (this === viewport) {\n      return true;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz);\n    }\n    return xyz;\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz);\n    }\n    return xyz;\n  }\n\n  getBounds(options = {}) {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const topLeft = this.unproject([0, 0], unprojectOption);\n    const topRight = this.unproject([this.width, 0], unprojectOption);\n    const bottomLeft = this.unproject([0, this.height], unprojectOption);\n    const bottomRight = this.unproject([this.width, this.height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // Extract frustum planes in common space\n  getFrustumPlanes() {\n    if (this._frustumPlanes.near) {\n      return this._frustumPlanes;\n    }\n\n    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));\n\n    return this._frustumPlanes;\n  }\n\n  // EXPERIMENTAL METHODS\n\n  /**\n   * Needed by panning and linear transition\n   * Pan the viewport to place a given world coordinate at screen point [x, y]\n   *\n   * @param {Array} coords - world coordinates\n   * @param {Array} pixel - [x,y] coordinates on screen\n   * @return {Object} props of the new viewport\n   */\n  panByPosition(coords, pixel) {\n    return null;\n  }\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude})\n      : distanceScales || DEFAULT_DISTANCE_SCALES;\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerUnit = new Vector3(this.distanceScales.metersPerUnit);\n    this.distanceScales.unitsPerMeter = new Vector3(this.distanceScales.unitsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n    }\n    this.viewMatrixUncentered = viewMatrix;\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center = new Vector3(this.projectPosition([longitude, latitude, 0]));\n\n    if (meterOffset) {\n      const commonPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.unitsPerMeter);\n      center.add(commonPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovy = 75,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1\n    } = opts;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS,\n        aspect: this.width / this.height,\n        focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera parameters\n    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}