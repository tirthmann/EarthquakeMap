{"version":3,"sources":["../../../src/views/orbit-view.ts"],"names":["DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","focalDistance","orbitAxis","rotationX","rotationOrbit","zoom","up","eye","viewMatrix","Matrix4","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","props","projectionMatrix","fovy","target","longitude","position","projectedCenter","project","center","xyz","topLeft","x","y","z","y2","pixelUnprojectionMatrix","X","Y","Z","coords","pixel","p0","nextCenter","width","unproject","Viewport","OrbitView","type","_getControllerProps","OrbitController","View"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  static displayName = 'OrbitView';\n\n  projectedCenter;\n\n  constructor(props) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    // @ts-expect-error\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n"],"file":"orbit-view.js"}