{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["viewMatrix","Matrix4","lookAt","eye","getProjectionMatrix","width","height","near","far","ortho","left","right","bottom","top","OrthographicViewport","props","zoom","target","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","distanceScales","scaleX","scaleY","unitsPerMeter","metersPerUnit","longitude","position","clone","projectionMatrix","X","Y","x","y","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","projectFlat","translate","vec2","add","negate","newCenter","center","unprojectFlat","Viewport","OrthographicView","type","_getControllerProps","OrthographicController","View","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n\n  projectFlat([X, Y]) {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]) {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: this.unprojectFlat(newCenter)};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"],"file":"orthographic-view.js"}