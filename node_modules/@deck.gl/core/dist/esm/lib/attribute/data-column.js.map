{"version":3,"sources":["../../../../src/lib/attribute/data-column.js"],"names":["hasFeature","FEATURES","Buffer","ShaderAttribute","glArrayFromType","typedArrayManager","toDoublePrecisionArray","log","getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","removed","vertexOffset","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","constructor","gl","opts","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","ELEMENT_INDEX_UINT32","defaultType","shaderAttributes","fp64","Float32Array","BYTES_PER_ELEMENT","value","settings","state","externalBuffer","bufferAccessor","allocatedValue","numInstances","bounds","constant","_buffer","setData","buffer","target","byteOffset","getAccessor","n","delete","release","getShaderAttributes","options","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","shaderAttributeDef","getBuffer","getValue","getBounds","result","min","slice","len","length","Infinity","max","i","j","v","ArrayBuffer","isView","_normalizeValue","normalized","_normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","requiredBufferSize","byteLength","reallocate","setAccessor","subData","data","updateSubBuffer","startOffset","endOffset","startIndex","endIndex","subarray","allocate","copy","oldValue","ArrayType","illegalArrayType","Error","name","warn","map","x","out","start","value1","value2"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    'vertexOffset' in shaderAttributeOptions\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport default class DataColumn {\n  /* eslint-disable max-statements */\n  constructor(gl, opts) {\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n\n    let bufferType = logicalType;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else if (!bufferType) {\n      bufferType = GL.FLOAT;\n    }\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n\n    this.setData(opts);\n  }\n  /* eslint-enable max-statements */\n\n  get buffer() {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      });\n    }\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  get numInstances() {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n) {\n    this.state.numInstances = n;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  // Returns [min: Array(size), max: Array(size)]\n  /* eslint-disable max-depth */\n  getBounds() {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n    let result = null;\n    if (this.state.constant) {\n      const min = this.value.slice();\n      result = [min, min];\n    } else {\n      const {value, numInstances, size} = this;\n      const len = numInstances * size;\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n        for (let i = 0; i < len; ) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n        result = [min, max];\n      }\n    }\n    this.state.bounds = result;\n    return result;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(opts) {\n    const {state} = this;\n    if (ArrayBuffer.isView(opts)) {\n      opts = {value: opts};\n    } else if (opts instanceof Buffer) {\n      opts = {buffer: opts};\n    }\n\n    const accessor = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n    state.bounds = null; // clear cached bounds\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this._normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(opts = {}) {\n    this.state.bounds = null; // clear cached bounds\n\n    const {value} = this;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate({numInstances, copy = false}) {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = this.defaultType;\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  _normalizeConstant(value) {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out, start) {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"],"file":"data-column.js"}