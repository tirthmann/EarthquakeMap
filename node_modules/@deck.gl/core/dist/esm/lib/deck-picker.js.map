{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","getEmptyPickingInfo","DeckPicker","constructor","gl","pickingFBO","pickLayersPass","layerFilter","lastPickedInfo","index","layerId","info","setProps","props","_pickable","finalize","delete","depthFBO","color","pickObject","opts","_pickClosestObject","pickObjects","_pickVisibleObjects","getLastPickedObject","x","y","layers","viewports","lastPickedLayerId","layer","id","lastPickedViewportId","viewport","find","l","v","coordinate","unproject","_resizeBuffer","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","_getPickable","pickableLayers","filter","isPickable","isComposite","length","views","radius","depth","mode","unproject3D","onViewportActive","effects","result","emptyInfo","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","affectedLayers","Set","i","pickedResult","_drawAndSample","pass","redrawReason","pickInfo","z","pickedLayer","pickedResultPass2","pickedX","pickedY","pickZ","pickedColors","add","disablePickingIndex","pickedObjectIndex","values","push","pickedColor","restorePickingColors","get","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","isMaxObjects","Number","isFinite","size","picked","has","object","set","Array","from","decodePickingColor","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo, getEmptyPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    if (this.depthFBO) {\n      this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    }\n    return this.pickingFBO;\n  }\n\n  // picking can only handle up to 255 layers. Drop non-pickable/invisible layers from the list.\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      const pickedResult =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          effects,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        ...pickedResult,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          effects,\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }) {\n    layers = this._getPickable(layers);\n\n    if (!layers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      effects,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    effects,\n    pass,\n    redrawReason,\n    pickZ\n  }) {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    const {decodePickingColor} = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      effects,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"file":"deck-picker.js"}