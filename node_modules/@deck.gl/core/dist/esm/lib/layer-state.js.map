{"version":3,"sources":["../../../src/lib/layer-state.ts"],"names":["ComponentState","LayerState","constructor","attributeManager","layer","needsRedraw","subLayers","usesPickingColorCache","component","_fetch","propName","url","fetch","props","_onResolve","value","onDataLoad","_onError","error","raiseError"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AAMA,eAAe,MAAMC,UAAN,SAA+CD,cAA/C,CAAiE;AAY9EE,EAAAA,WAAW,CAAC;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,GAAD,EAAgF;AACzF,UAAMA,KAAN;;AADyF;;AAAA;;AAAA;;AAAA;;AAEzF,SAAKD,gBAAL,GAAwBA,gBAAxB;AACA,SAAKE,WAAL,GAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACD;;AAEQ,MAALH,KAAK,GAAU;AACjB,WAAO,KAAKI,SAAZ;AACD;;AAEQ,MAALJ,KAAK,CAACA,KAAD,EAAe;AACtB,SAAKI,SAAL,GAAiBJ,KAAjB;AACD;;AAISK,EAAAA,MAAM,CAACC,QAAD,EAAWC,GAAX,EAAwB;AACtC,UAAMC,KAAK,GAAG,KAAKJ,SAAL,CAAeK,KAAf,CAAqBD,KAAnC;;AACA,QAAIA,KAAJ,EAAW;AACT,aAAOA,KAAK,CAACD,GAAD,EAAM;AAACD,QAAAA,QAAD;AAAWN,QAAAA,KAAK,EAAE,KAAKA;AAAvB,OAAN,CAAZ;AACD;;AACD,WAAO,MAAMK,MAAN,CAAaC,QAAb,EAAuBC,GAAvB,CAAP;AACD;;AAESG,EAAAA,UAAU,CAACJ,QAAD,EAAoBK,KAApB,EAAgC;AAClD,UAAMC,UAAU,GAAG,KAAKR,SAAL,CAAeK,KAAf,CAAqBG,UAAxC;;AACA,QAAIN,QAAQ,KAAK,MAAb,IAAuBM,UAA3B,EAAuC;AACrCA,MAAAA,UAAU,CAACD,KAAD,EAAQ;AAACL,QAAAA,QAAD;AAAWN,QAAAA,KAAK,EAAE,KAAKA;AAAvB,OAAR,CAAV;AACD;AACF;;AAESa,EAAAA,QAAQ,CAACP,QAAD,EAAoBQ,KAApB,EAAkC;AAClD,SAAKd,KAAL,CAAWe,UAAX,CAAsBD,KAAtB,oBAAwCR,QAAxC,iBAAuD,KAAKN,KAA5D;AACD;;AA/C6E","sourcesContent":["import ComponentState from '../lifecycle/component-state';\n\nimport type Layer from './layer';\nimport type AttributeManager from './attribute/attribute-manager';\nimport {LayerProps} from './layer-props';\n\nexport default class LayerState<T extends LayerProps> extends ComponentState<T> {\n  attributeManager: AttributeManager;\n  needsRedraw: boolean;\n  /**\n   * Sublayers rendered in a previous cycle\n   */\n  subLayers: any;\n  /**\n   * If the layer is using the shared instancedPickingColors buffer\n   */\n  usesPickingColorCache: boolean;\n\n  constructor({attributeManager, layer}: {attributeManager: AttributeManager; layer: Layer}) {\n    super(layer);\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer(): Layer {\n    return this.component as Layer;\n  }\n\n  set layer(layer: Layer) {\n    this.component = layer;\n  }\n\n  /* Override base Component methods with Layer-specific handling */\n\n  protected _fetch(propName, url: string) {\n    const fetch = this.component.props.fetch;\n    if (fetch) {\n      return fetch(url, {propName, layer: this.layer});\n    }\n    return super._fetch(propName, url);\n  }\n\n  protected _onResolve(propName: keyof T, value: any) {\n    const onDataLoad = this.component.props.onDataLoad;\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {propName, layer: this.layer});\n    }\n  }\n\n  protected _onError(propName: keyof T, error: Error) {\n    this.layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n  }\n}\n"],"file":"layer-state.js"}