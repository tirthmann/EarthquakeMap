{"version":3,"sources":["../../../src/lifecycle/prop-types.ts"],"names":["createTexture","destroyTexture","TYPE_DEFINITIONS","boolean","validate","value","propType","equal","value1","value2","Boolean","number","Number","isFinite","max","min","color","optional","isArray","length","arrayEqual","accessor","valueType","getTypeOf","array","compare","function","data","transform","component","dataTransform","props","image","release","array1","array2","len","i","parsePropTypes","propDefs","propTypes","defaultProps","deprecatedProps","propName","propDef","Object","entries","deprecated","deprecatedFor","Array","parsePropType","name","normalizePropDefinition","type","ArrayBuffer","isView"],"mappings":"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","sourcesContent":["import {createTexture, destroyTexture} from '../utils/texture';\n\nimport type Component from './component';\n\ntype BasePropType = {\n  value: any;\n  async?: boolean;\n  validate?: (value: any, propType: PropType) => boolean;\n  equal?: (value1: any, value2: any, propType: PropType) => boolean;\n};\n\n/**\n * Normalized prop type definition\n */\nexport type PropType = BasePropType & {\n  type: string;\n  name: string;\n  transform?: (value: any, propType: PropType, component: Component<any>) => any;\n  release?: (value: any, propType: PropType, component: Component<any>) => void;\n};\n\ntype BooleanPropType = BasePropType & {\n  type: 'boolean';\n  value: boolean;\n};\ntype NumberPropType = BasePropType & {\n  type: 'number';\n  value: number;\n  min?: number;\n  max?: number;\n};\ntype ColorPropType = BasePropType & {\n  type: 'color';\n  value: [number, number, number, number];\n  optional?: boolean;\n};\ntype ArrayPropType = BasePropType & {\n  type: 'array';\n  value: any[];\n  optional?: boolean;\n  compare?: boolean;\n};\ntype AccessorPropType = BasePropType & {\n  type: 'accessor';\n};\ntype FunctionPropType = BasePropType & {\n  type: 'function';\n  value: Function;\n  optional?: boolean;\n  compare?: boolean;\n};\ntype DataPropType = BasePropType & {\n  type: 'data';\n};\ntype ImagePropType = BasePropType & {\n  type: 'image';\n};\ntype ObjectPropType = BasePropType & {\n  type: 'object';\n};\ntype DeprecatedProp = {\n  deprecatedFor?: string | string[];\n};\nexport type PropTypeDef =\n  | DeprecatedProp\n  | boolean\n  | BooleanPropType\n  | number\n  | NumberPropType\n  | string\n  | DataPropType\n  | number[]\n  | ColorPropType\n  | ArrayPropType\n  | AccessorPropType\n  | FunctionPropType\n  | ImagePropType\n  | ObjectPropType\n  | null;\n\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType: BooleanPropType) {\n      return true;\n    },\n    equal(value1, value2, propType: BooleanPropType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType: NumberPropType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max!) &&\n        (!('min' in propType) || value >= propType.min!)\n      );\n    }\n  },\n  color: {\n    validate(value, propType: ColorPropType) {\n      return (\n        (propType.optional && !value) ||\n        (isArray(value) && (value.length === 3 || value.length === 4))\n      );\n    },\n    equal(value1, value2, propType: ColorPropType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate(value, propType: AccessorPropType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType: AccessorPropType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate(value, propType: ArrayPropType) {\n      return (propType.optional && !value) || isArray(value);\n    },\n    equal(value1, value2, propType: ArrayPropType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType: FunctionPropType) {\n      return (propType.optional && !value) || typeof value === 'function';\n    },\n    equal(value1, value2, propType: FunctionPropType) {\n      return !propType.compare || value1 === value2;\n    }\n  },\n  data: {\n    transform: (value, propType: DataPropType, component) => {\n      const {dataTransform} = component.props;\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: (value, propType: ImagePropType, component) => {\n      return createTexture(component, value);\n    },\n    release: value => {\n      destroyTexture(value);\n    }\n  }\n} as const;\n\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n  const len = array1.length;\n  if (len !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function parsePropTypes(propDefs: Record<string, PropTypeDef>): {\n  propTypes: Record<string, PropType>;\n  defaultProps: Record<string, any>;\n  deprecatedProps: Record<string, string[]>;\n} {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    const deprecated = (propDef as DeprecatedProp)?.deprecatedFor;\n    if (deprecated) {\n      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {propTypes, defaultProps, deprecatedProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name: string, propDef: PropTypeDef): PropType {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {type: 'array', value: propDef, compare: false});\n\n    case 'boolean':\n      return normalizePropDefinition(name, {type: 'boolean', value: propDef});\n\n    case 'number':\n      return normalizePropDefinition(name, {type: 'number', value: propDef});\n\n    case 'function':\n      // return guessFunctionType(name, propDef);\n      return normalizePropDefinition(name, {type: 'function', value: propDef, compare: true});\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction normalizePropDefinition(name, propDef): PropType {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return {name, type: getTypeOf(propDef.value), ...propDef};\n  }\n  return {name, ...TYPE_DEFINITIONS[propDef.type], ...propDef};\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value: any): string {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"],"file":"prop-types.js"}