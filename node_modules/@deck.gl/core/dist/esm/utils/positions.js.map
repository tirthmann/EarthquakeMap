{"version":3,"sources":["../../../src/utils/positions.ts"],"names":["PERCENT_OR_PIXELS_REGEX","parsePosition","value","position","relative","match","exec","length","parseFloat","Error","getPosition","extent","Math","round"],"mappings":"AAAA,MAAMA,uBAAuB,GAAG,yBAAhC;AAGA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,UAAQ,OAAOA,KAAf;AACE,SAAK,QAAL;AACE,aAAO;AACLC,QAAAA,QAAQ,EAAED,KADL;AAELE,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAKF,SAAK,QAAL;AACE,YAAMC,KAAK,GAAGL,uBAAuB,CAACM,IAAxB,CAA6BJ,KAA7B,CAAd;;AACA,UAAIG,KAAK,IAAIA,KAAK,CAACE,MAAN,IAAgB,CAA7B,EAAgC;AAC9B,cAAMH,QAAQ,GAAGC,KAAK,CAAC,CAAD,CAAL,KAAa,GAA9B;AACA,cAAMF,QAAQ,GAAGK,UAAU,CAACH,KAAK,CAAC,CAAD,CAAN,CAA3B;AACA,eAAO;AACLF,UAAAA,QAAQ,EAAEC,QAAQ,GAAGD,QAAQ,GAAG,GAAd,GAAoBA,QADjC;AAELC,UAAAA;AAFK,SAAP;AAID;;AAGH;AAEE,YAAM,IAAIK,KAAJ,2CAA6CP,KAA7C,EAAN;AArBJ;AAuBD;AAED,OAAO,SAASQ,WAAT,CAAqBP,QAArB,EAA+BQ,MAA/B,EAAuC;AAC5C,SAAOR,QAAQ,CAACC,QAAT,GAAoBQ,IAAI,CAACC,KAAL,CAAWV,QAAQ,CAACA,QAAT,GAAoBQ,MAA/B,CAApB,GAA6DR,QAAQ,CAACA,QAA7E;AACD","sourcesContent":["const PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\n\n// Takes a number or a string of formats `50%`, `33.3%` or `200px`\nexport function parsePosition(value) {\n  switch (typeof value) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n\n    case 'string':\n      const match = PERCENT_OR_PIXELS_REGEX.exec(value);\n      if (match && match.length >= 3) {\n        const relative = match[2] === '%';\n        const position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative\n        };\n      }\n    // fallthrough\n\n    default:\n      // eslint-disable-line\n      throw new Error(`Could not parse position string ${value}`);\n  }\n}\n\nexport function getPosition(position, extent) {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}\n"],"file":"positions.js"}