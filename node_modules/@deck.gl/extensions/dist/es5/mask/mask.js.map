{"version":3,"sources":["../../../src/mask/mask.js"],"names":["defaultProps","maskId","MaskExtension","maskByInstance","getAttributeManager","attributes","props","state","modules","mask","uniforms","context","moduleParameters","mask_maskByInstance","maskChannels","viewport","index","bounds","fromCoordinateOrigin","coordinateOrigin","fromCoordinateSystem","coordinateSystem","mask_enabled","mask_channel","COORDINATE_SYSTEM","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","opts","modelMatrix","bl","projectPosition","tr","mask_bounds","log","warn","LayerExtension","extensionName"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAArB;;IAIqBC,a;;;;;;;;;;;;WACnB,sBAAa;AAEX,UAAIC,cAAc,IAAG,uBAAuB,KAAKC,mBAAL,GAA2BC,UAArD,CAAlB;;AAEA,UAAI,oBAAoB,KAAKC,KAA7B,EAAoC;AAClCH,QAAAA,cAAc,GAAG,KAAKG,KAAL,CAAWH,cAA5B;AACD;;AACD,WAAKI,KAAL,CAAWJ,cAAX,GAA4BA,cAA5B;AAEA,aAAO;AACLK,QAAAA,OAAO,EAAE,CAACC,qBAAD;AADJ,OAAP;AAGD;;;WAED,oBAA4C;AAAA,UAAtCC,QAAsC,QAAtCA,QAAsC;AAAA,UAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,UAAnBC,gBAAmB,QAAnBA,gBAAmB;AAC1CF,MAAAA,QAAQ,CAACG,mBAAT,GAA+B,KAAKN,KAAL,CAAWJ,cAA1C;AACA,UAAOF,MAAP,GAAiB,KAAKK,KAAtB,CAAOL,MAAP;AACA,UAAOa,YAAP,GAAuBF,gBAAvB,CAAOE,YAAP;AACA,UAAOC,QAAP,GAAmBJ,OAAnB,CAAOI,QAAP;;AACA,UAAID,YAAY,IAAIA,YAAY,CAACb,MAAD,CAAhC,EAA0C;AACxC,mCAAgEa,YAAY,CAACb,MAAD,CAA5E;AAAA,YAAOe,KAAP,wBAAOA,KAAP;AAAA,YAAcC,MAAd,wBAAcA,MAAd;AAAA,YAAwCC,oBAAxC,wBAAsBC,gBAAtB;AACA,YAAuBC,oBAAvB,GAA+CN,YAAY,CAACb,MAAD,CAA3D,CAAKoB,gBAAL;AACAX,QAAAA,QAAQ,CAACY,YAAT,GAAwB,IAAxB;AACAZ,QAAAA,QAAQ,CAACa,YAAT,GAAwBP,KAAxB;;AAEA,YAAII,oBAAoB,KAAKI,wBAAkBC,OAA/C,EAAwD;AACtDL,UAAAA,oBAAoB,GAAGL,QAAQ,CAACW,YAAT,GACnBF,wBAAkBG,MADC,GAEnBH,wBAAkBI,SAFtB;AAGD;;AACD,YAAMC,IAAI,GAAG;AAACC,UAAAA,WAAW,EAAE,IAAd;AAAoBZ,UAAAA,oBAAoB,EAApBA,oBAApB;AAA0CE,UAAAA,oBAAoB,EAApBA;AAA1C,SAAb;AACA,YAAMW,EAAE,GAAG,KAAKC,eAAL,CAAqB,CAACf,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDY,IAAhD,CAAX;AACA,YAAMI,EAAE,GAAG,KAAKD,eAAL,CAAqB,CAACf,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDY,IAAhD,CAAX;AACAnB,QAAAA,QAAQ,CAACwB,WAAT,GAAuB,CAACH,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAeE,EAAE,CAAC,CAAD,CAAjB,EAAsBA,EAAE,CAAC,CAAD,CAAxB,CAAvB;AACD,OAfD,MAeO;AACL,YAAIhC,MAAJ,EAAY;AACVkC,oBAAIC,IAAJ,gDAAiDnC,MAAjD;AACD;;AACDS,QAAAA,QAAQ,CAACY,YAAT,GAAwB,KAAxB;AACD;AACF;;;EAzCwCe,oB;;;AA4C3CnC,aAAa,CAACoC,aAAd,GAA8B,eAA9B;AACApC,aAAa,CAACF,YAAd,GAA6BA,YAA7B","sourcesContent":["import {COORDINATE_SYSTEM, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\n\nconst defaultProps = {\n  maskId: ''\n};\n\nexport default class MaskExtension extends LayerExtension {\n  getShaders() {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if ('maskByInstance' in this.props) {\n      maskByInstance = this.props.maskByInstance;\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  draw({uniforms, context, moduleParameters}) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n\nMaskExtension.extensionName = 'MaskExtension';\nMaskExtension.defaultProps = defaultProps;\n"],"file":"mask.js"}