{"version":3,"sources":["../../../src/data-filter/aggregator.js"],"names":["Model","Texture2D","Framebuffer","isWebGL2","AGGREGATE_VS","AGGREGATE_FS","supportsFloatTarget","gl","getExtension","getFramebuffer","useFloatTarget","width","height","attachments","format","type","mipmaps","depth","getModel","shaderOptions","defines","NON_INSTANCED_MODEL","FLOAT_TARGET","id","vertexCount","isInstanced","drawMode","vs","fs","parameters","blend","blendFunc","blendEquation","depthTest"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,WAA1B,EAAuCC,QAAvC,QAAsD,eAAtD;AAGA,MAAMC,YAAY,89BAAlB;AAiCA,MAAMC,YAAY,wMAAlB;AAcA,OAAO,SAASC,mBAAT,CAA6BC,EAA7B,EAAiC;AAEtC,SACEA,EAAE,CAACC,YAAH,CAAgB,iBAAhB,MAECD,EAAE,CAACC,YAAH,CAAgB,wBAAhB,KAECD,EAAE,CAACC,YAAH,CAAgB,0BAAhB,CAJF,CADF;AAOD;AAGD,OAAO,SAASC,cAAT,CAAwBF,EAAxB,EAA4BG,cAA5B,EAA4C;AACjD,MAAIA,cAAJ,EAAoB;AAClB,WAAO,IAAIR,WAAJ,CAAgBK,EAAhB,EAAoB;AACzBI,MAAAA,KAAK,EAAE,CADkB;AAEzBC,MAAAA,MAAM,EAAE,CAFiB;AAGzBC,MAAAA,WAAW,EAAE;AACX,iBAAwB,IAAIZ,SAAJ,CAAcM,EAAd,EAAkB;AACxCO,UAAAA,MAAM,EAAEX,QAAQ,CAACI,EAAD,CAAR,eADgC;AAExCQ,UAAAA,IAAI,MAFoC;AAGxCC,UAAAA,OAAO,EAAE;AAH+B,SAAlB;AADb;AAHY,KAApB,CAAP;AAWD;;AACD,SAAO,IAAId,WAAJ,CAAgBK,EAAhB,EAAoB;AACzBI,IAAAA,KAAK,EAAE,GADkB;AAEzBC,IAAAA,MAAM,EAAE,EAFiB;AAGzBK,IAAAA,KAAK,EAAE;AAHkB,GAApB,CAAP;AAKD;AAGD,OAAO,SAASC,QAAT,CAAkBX,EAAlB,EAAsBY,aAAtB,EAAqCT,cAArC,EAAqD;AAC1DS,EAAAA,aAAa,CAACC,OAAd,CAAsBC,mBAAtB,GAA4C,CAA5C;;AACA,MAAIX,cAAJ,EAAoB;AAClBS,IAAAA,aAAa,CAACC,OAAd,CAAsBE,YAAtB,GAAqC,CAArC;AACD;;AAED,SAAO,IAAItB,KAAJ,CAAUO,EAAV,EAAc;AACnBgB,IAAAA,EAAE,EAAE,+BADe;AAEnBC,IAAAA,WAAW,EAAE,CAFM;AAGnBC,IAAAA,WAAW,EAAE,KAHM;AAInBC,IAAAA,QAAQ,GAJW;AAKnBC,IAAAA,EAAE,EAAEvB,YALe;AAMnBwB,IAAAA,EAAE,EAAEvB,YANe;AAOnB,OAAGc;AAPgB,GAAd,CAAP;AASD;AAED,OAAO,MAAMU,UAAU,GAAG;AACxBC,EAAAA,KAAK,EAAE,IADiB;AAExBC,EAAAA,SAAS,EAAE,YAFa;AAGxBC,EAAAA,aAAa,EAAE,cAHS;AAIxBC,EAAAA,SAAS,EAAE;AAJa,CAAnB","sourcesContent":["import {Model, Texture2D, Framebuffer, isWebGL2} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst AGGREGATE_VS = `\\\n#define SHADER_NAME data-filter-vertex-shader\n\n#ifdef FLOAT_TARGET\n  attribute float filterIndices;\n  attribute float filterPrevIndices;\n#else\n  attribute vec2 filterIndices;\n  attribute vec2 filterPrevIndices;\n#endif\n\nvarying vec4 vColor;\nconst float component = 1.0 / 255.0;\n\nvoid main() {\n  #ifdef FLOAT_TARGET\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\n  #else\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\n    float col = filterIndices.x;\n    float row = filterIndices.y * 4.0;\n    float channel = floor(row);\n    row = fract(row);\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\n  #endif\n  gl_PointSize = 1.0;\n}\n`;\n\nconst AGGREGATE_FS = `\\\n#define SHADER_NAME data-filter-fragment-shader\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main() {\n  if (dataFilter_value < 0.5) {\n    discard;\n  }\n  gl_FragColor = vColor;\n}\n`;\n\nexport function supportsFloatTarget(gl) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Support_for_float_textures_doesnt_mean_you_can_render_into_them!\n  return (\n    gl.getExtension('EXT_float_blend') &&\n    // WebGL 2\n    (gl.getExtension('EXT_color_buffer_float') ||\n      // WebGL 1\n      gl.getExtension('WEBGL_color_buffer_float'))\n  );\n}\n\n// A 1x1 framebuffer object that encodes the total count of filtered items\nexport function getFramebuffer(gl, useFloatTarget) {\n  if (useFloatTarget) {\n    return new Framebuffer(gl, {\n      width: 1,\n      height: 1,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n          format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n          type: GL.FLOAT,\n          mipmaps: false\n        })\n      }\n    });\n  }\n  return new Framebuffer(gl, {\n    width: 256,\n    height: 64,\n    depth: false\n  });\n}\n\n// Increments the counter based on dataFilter_value\nexport function getModel(gl, shaderOptions, useFloatTarget) {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n\n  return new Model(gl, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    drawMode: GL.POINTS,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    ...shaderOptions\n  });\n}\n\nexport const parameters = {\n  blend: true,\n  blendFunc: [GL.ONE, GL.ONE, GL.ONE, GL.ONE],\n  blendEquation: [GL.FUNC_ADD, GL.FUNC_ADD],\n  depthTest: false\n};\n"],"file":"aggregator.js"}