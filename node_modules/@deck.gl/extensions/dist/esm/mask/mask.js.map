{"version":3,"sources":["../../../src/mask/mask.js"],"names":["COORDINATE_SYSTEM","LayerExtension","log","mask","defaultProps","maskId","MaskExtension","getShaders","maskByInstance","getAttributeManager","attributes","props","state","modules","draw","uniforms","context","moduleParameters","mask_maskByInstance","maskChannels","viewport","index","bounds","coordinateOrigin","fromCoordinateOrigin","coordinateSystem","fromCoordinateSystem","mask_enabled","mask_channel","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","opts","modelMatrix","bl","projectPosition","tr","mask_bounds","warn","extensionName"],"mappings":"AAAA,SAAQA,iBAAR,EAA2BC,cAA3B,EAA2CC,GAA3C,QAAqD,eAArD;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAArB;AAIA,eAAe,MAAMC,aAAN,SAA4BL,cAA5B,CAA2C;AACxDM,EAAAA,UAAU,GAAG;AAEX,QAAIC,cAAc,IAAG,uBAAuB,KAAKC,mBAAL,GAA2BC,UAArD,CAAlB;;AAEA,QAAI,oBAAoB,KAAKC,KAA7B,EAAoC;AAClCH,MAAAA,cAAc,GAAG,KAAKG,KAAL,CAAWH,cAA5B;AACD;;AACD,SAAKI,KAAL,CAAWJ,cAAX,GAA4BA,cAA5B;AAEA,WAAO;AACLK,MAAAA,OAAO,EAAE,CAACV,IAAD;AADJ,KAAP;AAGD;;AAEDW,EAAAA,IAAI,CAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,GAAD,EAAwC;AAC1CF,IAAAA,QAAQ,CAACG,mBAAT,GAA+B,KAAKN,KAAL,CAAWJ,cAA1C;AACA,UAAM;AAACH,MAAAA;AAAD,QAAW,KAAKM,KAAtB;AACA,UAAM;AAACQ,MAAAA;AAAD,QAAiBF,gBAAvB;AACA,UAAM;AAACG,MAAAA;AAAD,QAAaJ,OAAnB;;AACA,QAAIG,YAAY,IAAIA,YAAY,CAACd,MAAD,CAAhC,EAA0C;AACxC,YAAM;AAACgB,QAAAA,KAAD;AAAQC,QAAAA,MAAR;AAAgBC,QAAAA,gBAAgB,EAAEC;AAAlC,UAA0DL,YAAY,CAACd,MAAD,CAA5E;AACA,UAAI;AAACoB,QAAAA,gBAAgB,EAAEC;AAAnB,UAA2CP,YAAY,CAACd,MAAD,CAA3D;AACAU,MAAAA,QAAQ,CAACY,YAAT,GAAwB,IAAxB;AACAZ,MAAAA,QAAQ,CAACa,YAAT,GAAwBP,KAAxB;;AAEA,UAAIK,oBAAoB,KAAK1B,iBAAiB,CAAC6B,OAA/C,EAAwD;AACtDH,QAAAA,oBAAoB,GAAGN,QAAQ,CAACU,YAAT,GACnB9B,iBAAiB,CAAC+B,MADC,GAEnB/B,iBAAiB,CAACgC,SAFtB;AAGD;;AACD,YAAMC,IAAI,GAAG;AAACC,QAAAA,WAAW,EAAE,IAAd;AAAoBV,QAAAA,oBAApB;AAA0CE,QAAAA;AAA1C,OAAb;AACA,YAAMS,EAAE,GAAG,KAAKC,eAAL,CAAqB,CAACd,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDW,IAAhD,CAAX;AACA,YAAMI,EAAE,GAAG,KAAKD,eAAL,CAAqB,CAACd,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,CAArB,EAAgDW,IAAhD,CAAX;AACAlB,MAAAA,QAAQ,CAACuB,WAAT,GAAuB,CAACH,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAeE,EAAE,CAAC,CAAD,CAAjB,EAAsBA,EAAE,CAAC,CAAD,CAAxB,CAAvB;AACD,KAfD,MAeO;AACL,UAAIhC,MAAJ,EAAY;AACVH,QAAAA,GAAG,CAACqC,IAAJ,gDAAiDlC,MAAjD;AACD;;AACDU,MAAAA,QAAQ,CAACY,YAAT,GAAwB,KAAxB;AACD;AACF;;AAzCuD;AA4C1DrB,aAAa,CAACkC,aAAd,GAA8B,eAA9B;AACAlC,aAAa,CAACF,YAAd,GAA6BA,YAA7B","sourcesContent":["import {COORDINATE_SYSTEM, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\n\nconst defaultProps = {\n  maskId: ''\n};\n\nexport default class MaskExtension extends LayerExtension {\n  getShaders() {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if ('maskByInstance' in this.props) {\n      maskByInstance = this.props.maskByInstance;\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  draw({uniforms, context, moduleParameters}) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n\nMaskExtension.extensionName = 'MaskExtension';\nMaskExtension.defaultProps = defaultProps;\n"],"file":"mask.js"}