{"version":3,"sources":["../../../src/mask/shader-module.js"],"names":["project","vs","fs","inject","getMaskUniforms","opts","uniforms","maskMap","mask_texture","name","dependencies","getUniforms"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AAEA,MAAMC,EAAE,4LAAR;AAQA,MAAMC,EAAE,wiBAAR;AAuBA,MAAMC,MAAM,GAAG;AACb,gDADa;AAIb,oSAJa;AAab,gDAba;AAgBb;AAhBa,CAAf;;AA6BA,MAAMC,eAAe,GAAG,CAACC,IAAI,GAAG,EAAR,KAAe;AACrC,QAAMC,QAAQ,GAAG,EAAjB;;AACA,MAAID,IAAI,CAACE,OAAT,EAAkB;AAChBD,IAAAA,QAAQ,CAACE,YAAT,GAAwBH,IAAI,CAACE,OAA7B;AACD;;AACD,SAAOD,QAAP;AACD,CAND;;AAQA,eAAe;AACbG,EAAAA,IAAI,EAAE,MADO;AAEbC,EAAAA,YAAY,EAAE,CAACV,OAAD,CAFD;AAGbC,EAAAA,EAHa;AAIbC,EAAAA,EAJa;AAKbC,EAAAA,MALa;AAMbQ,EAAAA,WAAW,EAAEP;AANA,CAAf","sourcesContent":["import {project} from '@deck.gl/core';\n\nconst vs = `\nuniform vec4 mask_bounds;\nuniform bool mask_maskByInstance;\nvec2 mask_getCoords(vec4 position) {\n  return (position.xy - mask_bounds.xy) / (mask_bounds.zw - mask_bounds.xy);\n}\n`;\n\nconst fs = `\nuniform sampler2D mask_texture;\nuniform int mask_channel;\nuniform bool mask_enabled;\nbool mask_isInBounds(vec2 texCoords) {\n  if (!mask_enabled) {\n    return true;\n  }\n  vec4 maskColor = texture2D(mask_texture, texCoords);\n  float maskValue = 1.0;\n  if (mask_channel == 0) {\n    maskValue = maskColor.r;\n  } else if (mask_channel == 1) {\n    maskValue = maskColor.g;\n  } else if (mask_channel == 2) {\n    maskValue = maskColor.b;\n  } else if (mask_channel == 3) {\n    maskValue = maskColor.a;\n  }\n  return maskValue < 0.5;\n}\n`;\n\nconst inject = {\n  'vs:#decl': `\nvarying vec2 mask_texCoords;\n`,\n  'vs:#main-end': `\n   vec4 mask_common_position;\n   if (mask_maskByInstance) {\n     mask_common_position = project_position(vec4(geometry.worldPosition, 1.0));\n   } else {\n     mask_common_position = geometry.position;\n   }\n   mask_texCoords = mask_getCoords(mask_common_position);\n`,\n  'fs:#decl': `\nvarying vec2 mask_texCoords;\n`,\n  'fs:#main-start': `\n  if (mask_enabled) {\n    bool mask = mask_isInBounds(mask_texCoords);\n\n    // Debug: show extent of render target\n    // gl_FragColor = vec4(mask_texCoords, 0.0, 1.0);\n    gl_FragColor = texture2D(mask_texture, mask_texCoords);\n\n    if (!mask) discard;\n  }\n`\n};\n\nconst getMaskUniforms = (opts = {}) => {\n  const uniforms = {};\n  if (opts.maskMap) {\n    uniforms.mask_texture = opts.maskMap;\n  }\n  return uniforms;\n};\n\nexport default {\n  name: 'mask',\n  dependencies: [project],\n  vs,\n  fs,\n  inject,\n  getUniforms: getMaskUniforms\n};\n"],"file":"shader-module.js"}