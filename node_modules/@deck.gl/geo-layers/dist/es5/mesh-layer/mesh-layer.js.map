{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["validateGeometryAttributes","attributes","hasColorAttribute","COLOR_0","colors","constant","value","Float32Array","defaultProps","pbrMaterial","type","featureIds","optional","_MeshLayer","shaders","modules","push","pbr","vs","fs","props","state","attributeManager","add","featureIdsPickingColors","size","noAlloc","update","calculateFeatureIdsPickingColors","oldProps","changeFlags","updatePbrMaterialUniforms","opts","model","setUniforms","u_Camera","getUniforms","project_uCameraPosition","u_pickFeatureIds","Boolean","mesh","id","materialParser","parseMaterial","getShaders","Model","context","gl","geometry","defines","HAS_UV_REGIONS","uvRegions","parameters","isInstanced","uniforms","unlit","pbrMetallicRoughness","baseColorTexture","GLTFMaterialParser","NORMAL","normals","TEXCOORD_0","texCoords","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","attribute","Uint8ClampedArray","length","pickingColor","index","encodePickingColor","SimpleMeshLayer","layerName"],"mappings":"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","sourcesContent":["import {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n}\n\nconst defaultProps = {\n  // PBR material object. _lighting must be pbr for this to work\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\nexport default class _MeshLayer extends SimpleMeshLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    if (featureIds) {\n      this.state.attributeManager.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      u_pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  getModel(mesh) {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {\n        ...shaders.defines,\n        ...materialParser?.defines,\n        HAS_UV_REGIONS: mesh.attributes.uvRegions\n      },\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n    const materialParser = new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n    return materialParser;\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    const {featureIds} = this.props;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n}\n\n_MeshLayer.layerName = '_MeshLayer';\n_MeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}