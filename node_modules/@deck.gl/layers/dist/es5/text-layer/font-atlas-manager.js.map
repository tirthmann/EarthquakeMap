{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","LRUCache","VALID_PROPS","getNewChars","key","characterSet","cachedFontAtlas","get","newChars","cachedMapping","mapping","cachedCharSet","Object","keys","Set","Array","forEach","char","has","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","textAlign","setFontAtlasCacheLimit","limit","log","assert","Number","isFinite","FontAtlasManager","props","buffer","sdf","cutoff","radius","_key","_atlas","prop","oldKey","_getKey","fontAtlas","_generateFontAtlas","set","canvas","document","createElement","width","getContext","getFontWidth","measureText","fontHeight","maxCanvasWidth","xOffset","yOffset","canvasHeight","height","getImageData","putImageData","tinySDF","TinySDF","size","draw","x","y","fillText"],"mappings":"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","sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nlet cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit) {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  constructor() {\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"],"file":"font-atlas-manager.js"}