{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["Layer","project32","gouraudLighting","phongLighting","picking","UNIT","Model","isWebGL2","hasFeature","FEATURES","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","gl","context","transpileToGLSL100","defines","useDerivatives","props","flatShading","GLSL_DERIVATIVES","FLAT_SHADING","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","oldProps","changeFlags","regenerateModels","extensionsChanged","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","id","isInstanced","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","uniforms","setUniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, phongLighting, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"],"file":"column-layer.js"}