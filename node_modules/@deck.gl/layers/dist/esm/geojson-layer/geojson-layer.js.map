{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","log","replaceInRange","binaryToFeatureForAccesor","POINT_LAYER","LINE_LAYER","POLYGON_LAYER","getDefaultProps","forwardProps","getGeojsonFeatures","separateGeojsonFeatures","createLayerPropsFromFeatures","createLayerPropsFromBinary","FEATURE_TYPES","defaultProps","circle","icon","text","stroked","filled","extruded","wireframe","iconAtlas","type","value","iconMapping","getIcon","f","properties","getText","pointType","getRadius","deprecatedFor","GeoJsonLayer","initializeState","state","layerProps","features","props","getLineDashArray","removed","updateState","changeFlags","dataChanged","data","binary","setState","_updateStateBinary","_updateStateJSON","encodePickingColor","wrapFeature","getSubLayerRow","bind","newFeatures","featuresDiff","Array","isArray","oldFeatures","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","getPickingInfo","params","info","sourceLayer","featureType","find","ft","id","startsWith","points","globalFeatureIds","_updateAutoHighlight","pointLayerIdPrefix","sourceIsPoints","layer","getSubLayers","updateAutoHighlight","_renderPolygonLayer","PolygonFillLayer","shouldRenderSubLayer","polygons","getSubLayerClass","forwardedProps","useLineColor","getLineColor","updateTriggers","lineColors","getSubLayerProps","_renderLineLayers","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","polygonsOutline","LineStringsLayer","lines","_renderPointLayers","highlightedObjectIndex","Number","isFinite","findIndex","d","types","Set","split","pointLayers","PointLayerMapping","PointsLayer","pointsLayerProps","instancePickingColors","rest","attributes","renderLayers","polygonFillLayer","lineLayers","getSubLayerAccessor","accessor","object","feature","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {replaceInRange} from '../utils';\nimport {binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\n\nconst defaultProps = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  _updateStateBinary({props, changeFlags}) {\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  _updateStateJSON({props, changeFlags}) {\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {index, sourceLayer} = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer.id.startsWith(`${this.id}-${ft}-`));\n    if (index >= 0 && sourceLayer.id.startsWith(`${this.id}-points-text`) && this.state.binary) {\n      info.index = this.props.data.points.globalFeatureIds.value[index];\n    }\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  _renderPolygonLayer() {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  _renderLineLayers() {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  _renderPointLayers() {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && this.state.binary) {\n          // Picking colors are per-point but for text per-character are required\n          // getPickingInfo() maps back to the correct index\n          // eslint-disable-next-line no-unused-vars\n          const {instancePickingColors, ...rest} = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            data: {...pointsLayerProps.data, attributes: rest}\n          };\n        }\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            pointsLayerProps\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}