{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"names":["QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","parseImplicitTiles","subtree","options","parentData","mortonIndex","x","y","z","childIndex","level","globalData","subdivisionScheme","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","children","lodMetricValue","contentUrl","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","concatBits","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","getAvailabilityResult","childSubtreeAvailability","lev","subtreePath","childSubtreeUrl","replaceContentUrlTemplate","Tile3DSubtreeLoader","childSubtree","isTileAvailable","tileAvailability","isContentAvailable","contentAvailability","childTileLevel","pData","index","currentTile","length","globalLevel","childCoordinates","formattedTile","formatTileData","push","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","rootBoundingVolume","uri","replace","boundingVolume","calculateBoundingVolumeForChildTile","content","id","type","region","west","south","east","north","minimumHeight","maximumHeight","boundingVolumesCount","sizeX","sizeY","sizeZ","childWest","childEast","childSouth","childNorth","childMinimumHeight","childMaximumHeight","console","warn","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","key","availabilityIndex","availabilityBuffer","byteIndex","Math","floor","bitIndex","bitValue"],"mappings":"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","sourcesContent":["import type {Availability, BoundingVolume, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-params\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(\n  subtree: Subtree,\n  options: any,\n  parentData: {mortonIndex: number; x: number; y: number; z: number} = {\n    mortonIndex: 0,\n    x: 0,\n    y: 0,\n    z: 0\n  },\n  childIndex: number = 0,\n  level: number = 0,\n  globalData: {level: number; mortonIndex: number; x: number; y: number; z: number} = {\n    level: 0,\n    mortonIndex: 0,\n    x: 0,\n    y: 0,\n    z: 0\n  }\n) {\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  // TODO Remove after real implicit tileset will be tested.\n  // Degug data\n  // tile.level = level + globalData.level;\n  // tile.x = concatBits(globalData.x, childTileX);\n  // tile.y = concatBits(globalData.y, childTileY);\n  // tile.z = concatBits(globalData.z, childTileZ);\n  // tile.mortonIndex = childTileMortonIndex;\n  // End of debug data\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const currentTile = await parseImplicitTiles(\n      subtree,\n      options,\n      pData,\n      index,\n      childTileLevel,\n      globalData\n    );\n\n    if (currentTile.contentUrl || currentTile.children.length) {\n      const globalLevel = lev + 1;\n      const childCoordinates = {childTileX, childTileY, childTileZ};\n      const formattedTile = formatTileData(currentTile, globalLevel, childCoordinates, options);\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(\n  tile,\n  level: number,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number},\n  options: any\n) {\n  const {\n    basePath,\n    refine,\n    getRefine,\n    lodMetricType,\n    getTileType,\n    rootLodMetricValue,\n    rootBoundingVolume\n  } = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n  const boundingVolume = calculateBoundingVolumeForChildTile(\n    level,\n    rootBoundingVolume,\n    childCoordinates\n  );\n\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue,\n    boundingVolume\n    // Temp debug values. Remove when real implicit tileset will be tested.\n    // x: tile.x,\n    // y: tile.y,\n    // z: tile.z,\n    // level: tile.level\n  };\n}\n\n/**\n * Calculate child bounding volume.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-rules\n * @param level\n * @param rootBoundingVolume\n * @param childCoordinates\n */\nfunction calculateBoundingVolumeForChildTile(\n  level: number,\n  rootBoundingVolume: BoundingVolume,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number}\n): BoundingVolume | null {\n  if (rootBoundingVolume.region) {\n    const {childTileX, childTileY, childTileZ} = childCoordinates;\n    const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;\n    const boundingVolumesCount = 2 ** level;\n\n    const sizeX = (east - west) / boundingVolumesCount;\n    const sizeY = (north - south) / boundingVolumesCount;\n    const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n\n    const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];\n    const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];\n    const [childMinimumHeight, childMaximumHeight] = [\n      minimumHeight + sizeZ * childTileZ,\n      minimumHeight + sizeZ * (childTileZ + 1)\n    ];\n\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn('Unsupported bounding volume type: ', rootBoundingVolume);\n  return null;\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"],"file":"parse-3d-implicit-tiles.js"}