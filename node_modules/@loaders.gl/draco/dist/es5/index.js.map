{"version":3,"sources":["../../src/index.ts"],"names":["DracoLoader","DracoWorkerLoader","parse","arrayBuffer","options","draco","dracoParser","DracoParser","parseSync","destroy","_TypecheckDracoLoader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;;AACA;;AASA;;;;;;AAUO,IAAMA,WAAW,mCACnBC,wBADmB;AAEtBC,EAAAA,KAAK,EAALA;AAFsB,EAAjB;;;;SAKQA,K;;;;;qEAAf,iBAAqBC,WAArB,EAA+CC,OAA/C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACwB,+CAAuBA,OAAvB,CADxB;;AAAA;AAAA;AACSC,YAAAA,KADT,yBACSA,KADT;AAEQC,YAAAA,WAFR,GAEsB,IAAIC,oBAAJ,CAAgBF,KAAhB,CAFtB;AAAA;AAAA,6CAIWC,WAAW,CAACE,SAAZ,CAAsBL,WAAtB,EAAmCC,OAAnC,aAAmCA,OAAnC,uBAAmCA,OAAO,CAAEC,KAA5C,CAJX;;AAAA;AAAA;AAMIC,YAAAA,WAAW,CAACG,OAAZ;AANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWO,IAAMC,qBAAuC,GAAGV,WAAhD","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMesh, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMesh, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: DracoLoaderOptions): Promise<DracoMesh> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"],"file":"index.js"}