{"version":3,"sources":["../../../../src/lib/extensions/EXT_meshopt_compression.ts"],"names":["DEFAULT_MESHOPT_OPTIONS","byteOffset","filter","EXT_MESHOPT_COMPRESSION","name","preprocess","gltfData","scenegraph","GLTFScenegraph","getRequiredExtensions","includes","Error","decode","options","gltf","decompressMeshes","promises","json","bufferViews","bufferViewIndex","push","decodeMeshoptBufferView","Promise","all","removeExtension","bufferView","meshoptExtension","getObjectExtension","buffer","byteLength","byteStride","count","mode","source","Uint8Array","result","ArrayBuffer"],"mappings":";;;;;;;;;;;;;;;AAGA;;AACA;;;;;;;;AAIA,IAAMA,uBAAuB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,CADkB;AAE9BC,EAAAA,MAAM,EAAE;AAFsB,CAAhC;AAMA,IAAMC,uBAAuB,GAAG,yBAAhC;AAEO,IAAMC,IAAI,GAAGD,uBAAb;;;AAEA,SAASE,UAAT,CAAoBC,QAApB,EAA4C;AACjD,MAAMC,UAAU,GAAG,IAAIC,uBAAJ,CAAmBF,QAAnB,CAAnB;;AACA,MACEC,UAAU,CAACE,qBAAX,GAAmCC,QAAnC,CAA4CP,uBAA5C,KACA,CAAC,yCAFH,EAGE;AACA,UAAM,IAAIQ,KAAJ,oCAAsCR,uBAAtC,+BAAN;AACD;AACF;;SAEqBS,M;;;;;sEAAf,iBAAsBN,QAAtB,EAA8CO,OAA9C;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCN,YAAAA,UADD,GACc,IAAIC,uBAAJ,CAAmBF,QAAnB,CADd;;AAAA,gBAGAO,OAHA,aAGAA,OAHA,gCAGAA,OAAO,CAAEC,IAHT,0CAGA,cAAeC,gBAHf;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOCC,YAAAA,QAPD,GAO4B,EAP5B;AAAA,mDAQyBV,QAAQ,CAACW,IAAT,CAAcC,WAAd,IAA6B,EARtD;;AAAA;AAQL,kEAA+D;AAApDC,gBAAAA,eAAoD;AAC7DH,gBAAAA,QAAQ,CAACI,IAAT,CAAcC,uBAAuB,CAACd,UAAD,EAAaY,eAAb,CAArC;AACD;AAVI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaCG,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAbD;;AAAA;AAgBLT,YAAAA,UAAU,CAACiB,eAAX,CAA2BrB,uBAA3B;;AAhBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAoBQkB,uB;;;;;uFAAf,kBACEd,UADF,EAEEkB,UAFF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIQC,YAAAA,gBAJR,GAI2BnB,UAAU,CAACoB,kBAAX,CACvBF,UADuB,EAEvBtB,uBAFuB,CAJ3B;;AAAA,iBAQMuB,gBARN;AAAA;AAAA;AAAA;;AASUE,YAAAA,MATV,GASmBH,UAAU,CAACG,MAT9B;AAAA,oCAkBQF,gBAlBR,CAYMzB,UAZN,EAYMA,UAZN,sCAYmB,CAZnB,mDAkBQyB,gBAlBR,CAaMG,UAbN,EAaMA,UAbN,uCAamB,CAbnB,2BAcMC,UAdN,GAkBQJ,gBAlBR,CAcMI,UAdN,EAeMC,KAfN,GAkBQL,gBAlBR,CAeMK,KAfN,EAgBMC,IAhBN,GAkBQN,gBAlBR,CAgBMM,IAhBN,0BAkBQN,gBAlBR,CAiBMxB,MAjBN,EAiBMA,MAjBN,sCAiBe,MAjBf;AAqBU+B,YAAAA,MArBV,GAqBmB,IAAIC,UAAJ,CAAeN,MAAf,EAAuB3B,UAAvB,EAAmC4B,UAAnC,CArBnB;AAsBUM,YAAAA,MAtBV,GAsBmB,IAAIC,WAAJ,CAAgBL,KAAK,GAAGD,UAAxB,CAtBnB;AAAA;AAAA,mBAuBU,6CAAwB,IAAII,UAAJ,CAAeC,MAAf,CAAxB,EAAgDJ,KAAhD,EAAuDD,UAAvD,EAAmEG,MAAnE,EAA2ED,IAA3E,EAAiF9B,MAAjF,CAvBV;;AAAA;AAAA,8CAwBWiC,MAxBX;;AAAA;AAAA,8CA2BS,IA3BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint-disable camelcase */\nimport type {GLTF, GLTFBufferView, GLTF_EXT_meshopt_compression} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {isMeshoptSupported, meshoptDecodeGltfBuffer} from '../../meshopt/meshopt-decoder';\n\n// @ts-ignore\n// eslint-disable-next-line\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\n\n/** Extension name */\nconst EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\n\nexport const name = EXT_MESHOPT_COMPRESSION;\n\nexport function preprocess(gltfData: {json: GLTF}) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n  if (\n    scenegraph.getRequiredExtensions().includes(EXT_MESHOPT_COMPRESSION) &&\n    !isMeshoptSupported()\n  ) {\n    throw new Error(`gltf: Required extension ${EXT_MESHOPT_COMPRESSION} not supported by browser`);\n  }\n}\n\nexport async function decode(gltfData: {json: GLTF}, options: GLTFLoaderOptions) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const promises: Promise<any>[] = [];\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\n/** Decode one meshopt buffer view */\nasync function decodeMeshoptBufferView(\n  scenegraph: GLTFScenegraph,\n  bufferView: GLTFBufferView\n): Promise<ArrayBuffer | null> {\n  const meshoptExtension = scenegraph.getObjectExtension<GLTF_EXT_meshopt_compression>(\n    bufferView,\n    EXT_MESHOPT_COMPRESSION\n  );\n  if (meshoptExtension) {\n    const buffer = bufferView.buffer;\n\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE'\n    } = meshoptExtension;\n\n    // @ts-expect-error TODO - fix buffer handling\n    const source = new Uint8Array(buffer, byteOffset, byteLength);\n    const result = new ArrayBuffer(count * byteStride);\n    await meshoptDecodeGltfBuffer(new Uint8Array(result), count, byteStride, source, mode, filter);\n    return result;\n  }\n\n  return null;\n}\n"],"file":"EXT_meshopt_compression.js"}