{"version":3,"sources":["../../../../src/tileset/helpers/i3s-lod.ts"],"names":["getLodStatus","tile","frameState","lodMetricValue","isNaN","screenSize","getProjectedRadius","header","children","originalViewport","viewport","ViewportClass","constructor","longitude","latitude","height","width","bearing","zoom","pitch","mbsLat","mbs","mbsLon","mbsZ","mbsR","mbsCenterCartesian","boundingVolume","center","cameraPositionCartographic","unprojectPosition","cameraPosition","cameraPositionCartesian","Ellipsoid","WGS84","cartographicToCartesian","Vector3","toEye","subtract","normalize","enuToCartesianMatrix","Matrix4","eastNorthUpToFixedFrame","cartesianToEnuMatrix","invert","cameraPositionEnu","transform","projection","Math","sqrt","extraZ","extraVertexEnu","extraVertexCartesian","extraVectorCartesian","radiusVector","cross","scale","sphereMbsBorderVertexCartesian","add","sphereMbsBorderVertexCartographic","cartesianToCartographic","projectedOrigin","project","projectedMbsBorderVertex","projectedRadius","magnitude"],"mappings":"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","sourcesContent":["import {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport Tile3D from '../tile-3d';\nimport {FrameState} from './frame-state';\n\n/**\n * For the maxScreenThreshold error metric, maxError means that you should replace the node with it's children\n   as soon as the nodes bounding sphere has a screen radius larger than maxError pixels.\n   In this sense a value of 0 means you should always load it's children,\n   or if it's a leaf node, you should always display it.\n * @param tile \n * @param frameState \n * @returns \n */\nexport function getLodStatus(tile: Tile3D, frameState: FrameState): 'DIG' | 'OUT' | 'DRAW' {\n  if (tile.lodMetricValue === 0 || isNaN(tile.lodMetricValue)) {\n    return 'DIG';\n  }\n  const screenSize = 2 * getProjectedRadius(tile, frameState);\n  if (screenSize < 2) {\n    return 'OUT';\n  }\n  if (!tile.header.children || screenSize <= tile.lodMetricValue) {\n    return 'DRAW';\n  } else if (tile.header.children) {\n    return 'DIG';\n  }\n  return 'OUT';\n}\n\n/**\n * Calculate size of MBS radius projected on the screen plane\n * @param tile\n * @param frameState\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function getProjectedRadius(tile: Tile3D, frameState: FrameState): number {\n  const originalViewport = frameState.viewport;\n  const ViewportClass = originalViewport.constructor;\n  const {longitude, latitude, height, width, bearing, zoom} = originalViewport;\n  // @ts-ignore\n  const viewport = new ViewportClass({longitude, latitude, height, width, bearing, zoom, pitch: 0});\n  const mbsLat = tile.header.mbs[1];\n  const mbsLon = tile.header.mbs[0];\n  const mbsZ = tile.header.mbs[2];\n  const mbsR = tile.header.mbs[3];\n  const mbsCenterCartesian = [...tile.boundingVolume.center];\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    cameraPositionCartographic,\n    new Vector3()\n  );\n\n  // ---------------------------\n  // Calculate mbs border vertex\n  // ---------------------------\n  const toEye = new Vector3(cameraPositionCartesian).subtract(mbsCenterCartesian).normalize();\n  // Add extra vector to form plane\n  const enuToCartesianMatrix = new Matrix4();\n  Ellipsoid.WGS84.eastNorthUpToFixedFrame(mbsCenterCartesian, enuToCartesianMatrix);\n  const cartesianToEnuMatrix = new Matrix4(enuToCartesianMatrix).invert();\n  const cameraPositionEnu = new Vector3(cameraPositionCartesian).transform(cartesianToEnuMatrix);\n  // Mean Proportionals in Right Triangles - Altitude rule\n  // https://mathbitsnotebook.com/Geometry/RightTriangles/RTmeanRight.html\n  const projection = Math.sqrt(\n    cameraPositionEnu[0] * cameraPositionEnu[0] + cameraPositionEnu[1] * cameraPositionEnu[1]\n  );\n  const extraZ = (projection * projection) / cameraPositionEnu[2];\n  const extraVertexEnu = new Vector3([cameraPositionEnu[0], cameraPositionEnu[1], extraZ]);\n  const extraVertexCartesian = extraVertexEnu.transform(enuToCartesianMatrix);\n  const extraVectorCartesian = new Vector3(extraVertexCartesian)\n    .subtract(mbsCenterCartesian)\n    .normalize();\n  // We need radius vector orthogonal to toEye vector\n  const radiusVector = toEye.cross(extraVectorCartesian).normalize().scale(mbsR);\n  const sphereMbsBorderVertexCartesian = new Vector3(mbsCenterCartesian).add(radiusVector);\n  const sphereMbsBorderVertexCartographic = Ellipsoid.WGS84.cartesianToCartographic(\n    sphereMbsBorderVertexCartesian\n  );\n  // ---------------------------\n\n  // Project center vertex and border vertex and calculate projected radius of MBS\n  const projectedOrigin = viewport.project([mbsLon, mbsLat, mbsZ]);\n  const projectedMbsBorderVertex = viewport.project(sphereMbsBorderVertexCartographic);\n  const projectedRadius = new Vector3(projectedOrigin)\n    .subtract(projectedMbsBorderVertex)\n    .magnitude();\n  return projectedRadius;\n}\n"],"file":"i3s-lod.js"}