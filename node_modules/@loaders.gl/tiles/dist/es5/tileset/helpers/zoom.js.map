{"version":3,"sources":["../../../../src/tileset/helpers/zoom.ts"],"names":["WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","Vector3","getZoomFromBoundingVolume","boundingVolume","cartorgraphicCenter","OrientedBoundingBox","halfAxes","obbSize","getObbSize","Math","log2","BoundingSphere","radius","width","height","zoomX","zoomY","getColumn","axeY","axeZ","farthestVertex","add","size","len"],"mappings":";;;;;;;AAAA;;AACA;;AAGA,IAAMA,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,kBAAvB;AAEA,IAAMC,aAAa,GAAG,IAAIC,aAAJ,EAAtB;;AAQO,SAASC,yBAAT,CACLC,cADK,EAELC,mBAFK,EAGL;AACA,MAAID,cAAc,YAAYE,4BAA9B,EAAmD;AAEjD,QAAOC,QAAP,GAAmBH,cAAnB,CAAOG,QAAP;AACA,QAAMC,OAAO,GAAGC,UAAU,CAACF,QAAD,CAA1B;AAGA,WAAOG,IAAI,CAACC,IAAL,CAAUX,cAAc,IAAIQ,OAAO,GAAGH,mBAAmB,CAAC,CAAD,CAAjC,CAAxB,CAAP;AACD,GAPD,MAOO,IAAID,cAAc,YAAYQ,uBAA9B,EAA8C;AAEnD,QAAOC,MAAP,GAAiBT,cAAjB,CAAOS,MAAP;AAEA,WAAOH,IAAI,CAACC,IAAL,CAAUX,cAAc,IAAIa,MAAM,GAAGR,mBAAmB,CAAC,CAAD,CAAhC,CAAxB,CAAP;AACD,GALM,MAKA,IAAID,cAAc,CAACU,KAAf,IAAwBV,cAAc,CAACW,MAA3C,EAAmD;AAExD,QAAOD,KAAP,GAAwBV,cAAxB,CAAOU,KAAP;AAAA,QAAcC,MAAd,GAAwBX,cAAxB,CAAcW,MAAd;AACA,QAAMC,KAAK,GAAGN,IAAI,CAACC,IAAL,CAAUb,cAAc,GAAGgB,KAA3B,CAAd;AACA,QAAMG,KAAK,GAAGP,IAAI,CAACC,IAAL,CAAUZ,cAAc,GAAGgB,MAA3B,CAAd;AAEA,WAAO,CAACC,KAAK,GAAGC,KAAT,IAAkB,CAAzB;AACD;;AAED,SAAO,CAAP;AACD;;AAED,SAASR,UAAT,CAAoBF,QAApB,EAA8B;AAC5BA,EAAAA,QAAQ,CAACW,SAAT,CAAmB,CAAnB,EAAsBjB,aAAtB;AACA,MAAMkB,IAAI,GAAGZ,QAAQ,CAACW,SAAT,CAAmB,CAAnB,CAAb;AACA,MAAME,IAAI,GAAGb,QAAQ,CAACW,SAAT,CAAmB,CAAnB,CAAb;AACA,MAAMG,cAAc,GAAGpB,aAAa,CAACqB,GAAd,CAAkBH,IAAlB,EAAwBG,GAAxB,CAA4BF,IAA5B,CAAvB;AACA,MAAMG,IAAI,GAAGF,cAAc,CAACG,GAAf,EAAb;AACA,SAAOD,IAAP;AACD","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"],"file":"zoom.js"}