{"version":3,"sources":["../../../../src/tileset/helpers/zoom.ts"],"names":["Vector3","BoundingSphere","OrientedBoundingBox","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","getZoomFromBoundingVolume","boundingVolume","cartorgraphicCenter","halfAxes","obbSize","getObbSize","Math","log2","radius","width","height","zoomX","zoomY","getColumn","axeY","axeZ","farthestVertex","add","size","len"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,cAAR,EAAwBC,mBAAxB,QAAkD,kBAAlD;AAGA,MAAMC,cAAc,GAAG,SAAvB;AACA,MAAMC,cAAc,GAAG,SAAvB;AACA,MAAMC,cAAc,GAAG,kBAAvB;AAEA,MAAMC,aAAa,GAAG,IAAIN,OAAJ,EAAtB;AAQA,OAAO,SAASO,yBAAT,CACLC,cADK,EAELC,mBAFK,EAGL;AACA,MAAID,cAAc,YAAYN,mBAA9B,EAAmD;AAEjD,UAAM;AAACQ,MAAAA;AAAD,QAAaF,cAAnB;AACA,UAAMG,OAAO,GAAGC,UAAU,CAACF,QAAD,CAA1B;AAGA,WAAOG,IAAI,CAACC,IAAL,CAAUT,cAAc,IAAIM,OAAO,GAAGF,mBAAmB,CAAC,CAAD,CAAjC,CAAxB,CAAP;AACD,GAPD,MAOO,IAAID,cAAc,YAAYP,cAA9B,EAA8C;AAEnD,UAAM;AAACc,MAAAA;AAAD,QAAWP,cAAjB;AAEA,WAAOK,IAAI,CAACC,IAAL,CAAUT,cAAc,IAAIU,MAAM,GAAGN,mBAAmB,CAAC,CAAD,CAAhC,CAAxB,CAAP;AACD,GALM,MAKA,IAAID,cAAc,CAACQ,KAAf,IAAwBR,cAAc,CAACS,MAA3C,EAAmD;AAExD,UAAM;AAACD,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkBT,cAAxB;AACA,UAAMU,KAAK,GAAGL,IAAI,CAACC,IAAL,CAAUX,cAAc,GAAGa,KAA3B,CAAd;AACA,UAAMG,KAAK,GAAGN,IAAI,CAACC,IAAL,CAAUV,cAAc,GAAGa,MAA3B,CAAd;AAEA,WAAO,CAACC,KAAK,GAAGC,KAAT,IAAkB,CAAzB;AACD;;AAED,SAAO,CAAP;AACD;;AAED,SAASP,UAAT,CAAoBF,QAApB,EAA8B;AAC5BA,EAAAA,QAAQ,CAACU,SAAT,CAAmB,CAAnB,EAAsBd,aAAtB;AACA,QAAMe,IAAI,GAAGX,QAAQ,CAACU,SAAT,CAAmB,CAAnB,CAAb;AACA,QAAME,IAAI,GAAGZ,QAAQ,CAACU,SAAT,CAAmB,CAAnB,CAAb;AACA,QAAMG,cAAc,GAAGjB,aAAa,CAACkB,GAAd,CAAkBH,IAAlB,EAAwBG,GAAxB,CAA4BF,IAA5B,CAAvB;AACA,QAAMG,IAAI,GAAGF,cAAc,CAACG,GAAf,EAAb;AACA,SAAOD,IAAP;AACD","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"],"file":"zoom.js"}