"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_transfer_list_1 = require("../worker-utils/get-transfer-list");
const onMessageWrapperMap = new Map();
/**
 * Type safe wrapper for worker code
 */
class WorkerBody {
    /*
     * (type: WorkerMessageType, payload: WorkerMessagePayload) => any
     */
    static set onmessage(onMessage) {
        // eslint-disable-next-line no-restricted-globals
        self.onmessage = (message) => {
            if (!isKnownMessage(message)) {
                return;
            }
            // Confusingly the message itself also has a 'type' field which is always set to 'message'
            const { type, payload } = message.data;
            onMessage(type, payload);
        };
    }
    static addEventListener(onMessage) {
        let onMessageWrapper = onMessageWrapperMap.get(onMessage);
        if (!onMessageWrapper) {
            onMessageWrapper = (message) => {
                if (!isKnownMessage(message)) {
                    return;
                }
                // Confusingly the message itself also has a 'type' field which is always set to 'message'
                const { type, payload } = message.data;
                onMessage(type, payload);
            };
        }
        // eslint-disable-next-line no-restricted-globals
        self.addEventListener('message', onMessageWrapper);
    }
    static removeEventListener(onMessage) {
        const onMessageWrapper = onMessageWrapperMap.get(onMessage);
        onMessageWrapperMap.delete(onMessage);
        // eslint-disable-next-line no-restricted-globals
        self.removeEventListener('message', onMessageWrapper);
    }
    /**
     * Send a message from a worker to creating thread (main thread)
     * @param type
     * @param payload
     */
    static postMessage(type, payload) {
        if (self) {
            const data = { source: 'loaders.gl', type, payload };
            const transferList = (0, get_transfer_list_1.getTransferList)(payload);
            // eslint-disable-next-line no-restricted-globals
            // @ts-ignore
            self.postMessage(data, transferList);
        }
    }
}
exports.default = WorkerBody;
// Filter out noise messages sent to workers
function isKnownMessage(message) {
    const { type, data } = message;
    return (type === 'message' &&
        data &&
        typeof data.source === 'string' &&
        data.source.startsWith('loaders.gl'));
}
